{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlchemyProvider = void 0;\n/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.alchemyapi.io\";\n    case \"goerli\":\n      return \"eth-goerli.g.alchemy.com\";\n    case \"sepolia\":\n      return \"eth-sepolia.g.alchemy.com\";\n    case \"arbitrum\":\n      return \"arb-mainnet.g.alchemy.com\";\n    case \"arbitrum-goerli\":\n      return \"arb-goerli.g.alchemy.com\";\n    case \"matic\":\n      return \"polygon-mainnet.g.alchemy.com\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.g.alchemy.com\";\n    case \"optimism\":\n      return \"opt-mainnet.g.alchemy.com\";\n    case \"optimism-goerli\":\n      return \"opt-goerli.g.alchemy.com\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nclass AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = AlchemyProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    _defineProperty(this, \"apiKey\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AlchemyProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  async _perform(req) {\n    // https://docs.alchemy.com/reference/trace-transaction\n    if (req.method === \"getTransactionResult\") {\n      const {\n        trace,\n        tx\n      } = await (0, index_js_1.resolveProperties)({\n        trace: this.send(\"trace_transaction\", [req.hash]),\n        tx: this.getTransaction(req.hash)\n      });\n      if (trace == null || tx == null) {\n        return null;\n      }\n      let data;\n      let error = false;\n      try {\n        data = trace[0].result.output;\n        error = trace[0].error === \"Reverted\";\n      } catch (error) {}\n      if (data) {\n        (0, index_js_1.assert)(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n          action: \"getTransactionResult\",\n          data,\n          reason: null,\n          transaction: tx,\n          invocation: null,\n          revert: null // @TODO\n        });\n\n        return data;\n      }\n      (0, index_js_1.assert)(false, \"could not parse trace result\", \"BAD_DATA\", {\n        value: trace\n      });\n    }\n    return await super._perform(req);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"alchemy\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\nexports.AlchemyProvider = AlchemyProvider;","map":{"version":3,"sources":["../../src.ts/providers/provider-alchemy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlchemyProvider = void 0;\n/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n    switch (name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n    }\n    (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nclass AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n    apiKey;\n    constructor(_network, apiKey) {\n        if (_network == null) {\n            _network = \"mainnet\";\n        }\n        const network = network_js_1.Network.from(_network);\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n        (0, index_js_1.defineProperties)(this, { apiKey });\n    }\n    _getProvider(chainId) {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        }\n        catch (error) { }\n        return super._getProvider(chainId);\n    }\n    async _perform(req) {\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await (0, index_js_1.resolveProperties)({\n                trace: this.send(\"trace_transaction\", [req.hash]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) {\n                return null;\n            }\n            let data;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            }\n            catch (error) { }\n            if (data) {\n                (0, index_js_1.assert)(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n            (0, index_js_1.assert)(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n        return await super._perform(req);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n    static getRequest(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n        request.allowGzip = true;\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                (0, community_js_1.showThrottleMessage)(\"alchemy\");\n                return true;\n            };\n        }\n        return request;\n    }\n}\nexports.AlchemyProvider = AlchemyProvider;\n//# sourceMappingURL=provider-alchemy.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}