{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberCoder = void 0;\nconst index_js_1 = require(\"../../utils/index.js\");\nconst typed_js_1 = require(\"../typed.js\");\nconst abstract_coder_js_1 = require(\"./abstract-coder.js\");\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nclass NumberCoder extends abstract_coder_js_1.Coder {\n  constructor(size, signed, localName) {\n    const name = (signed ? \"int\" : \"uint\") + size * 8;\n    super(name, name, localName, false);\n    _defineProperty(this, \"size\", void 0);\n    _defineProperty(this, \"signed\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      size,\n      signed\n    }, {\n      size: \"number\",\n      signed: \"boolean\"\n    });\n  }\n  defaultValue() {\n    return 0;\n  }\n  encode(writer, _value) {\n    let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));\n    // Check bounds are safe for encoding\n    let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);\n    if (this.signed) {\n      let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);\n      if (value > bounds || value < -(bounds + BN_1)) {\n        this._throwError(\"value out-of-bounds\", _value);\n      }\n      value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);\n    } else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {\n      this._throwError(\"value out-of-bounds\", _value);\n    }\n    return writer.writeValue(value);\n  }\n  decode(reader) {\n    let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);\n    if (this.signed) {\n      value = (0, index_js_1.fromTwos)(value, this.size * 8);\n    }\n    return value;\n  }\n}\nexports.NumberCoder = NumberCoder;","map":{"version":3,"sources":["../../../src.ts/abi/coders/number.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAIA,MAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AAOA,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AACtB,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AACtB,MAAM,cAAc,GAAG,MAAM,CAAC,oEAAoE,CAAC;AAEnG;;AAEG;AACH,MAAa,WAAY,SAAQ,mBAAA,CAAA,KAAK,CAAA;EAIlC,WAAA,CAAY,IAAY,EAAE,MAAe,EAAE,SAAiB,EAAA;IACxD,MAAM,IAAI,GAAI,CAAC,MAAM,GAAG,KAAK,GAAE,MAAM,IAAK,IAAI,GAAG,CAAG;IACpD,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;IAAC,eAAA;IAAA,eAAA;IAEpC,CAAA,CAAA,EAAA,UAAA,CAAA,gBAAgB,EAAc,IAAI,EAAE;MAAE,IAAI;MAAE;IAAM,CAAE,EAAE;MAAE,IAAI,EAAE,QAAQ;MAAE,MAAM,EAAE;IAAS,CAAE,CAAC;EAChG;EAEA,YAAY,CAAA,EAAA;IACR,OAAO,CAAC;EACZ;EAEA,MAAM,CAAC,MAAc,EAAE,MAA4B,EAAA;IAC/C,IAAI,KAAK,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,SAAS,EAAC,UAAA,CAAA,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAE3D;IACA,IAAI,YAAY,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,IAAI,EAAC,cAAc,EAAE,mBAAA,CAAA,QAAQ,GAAG,CAAC,CAAC;IACrD,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,IAAI,MAAM,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,IAAI,EAAC,YAAY,EAAG,IAAI,CAAC,IAAI,GAAG,CAAC,GAAI,CAAC,CAAC;MACpD,IAAI,KAAK,GAAG,MAAM,IAAI,KAAK,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC,EAAE;QAC5C,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,MAAM,CAAC;MAClD;MACD,KAAK,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,MAAM,EAAC,KAAK,EAAE,CAAC,GAAG,mBAAA,CAAA,QAAQ,CAAC;KACtC,MAAM,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,IAAI,EAAC,YAAY,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE;MAClE,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,MAAM,CAAC;IAClD;IAED,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;EACnC;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,IAAI,KAAK,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,IAAI,EAAC,MAAM,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAEnD,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,KAAK,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,KAAK,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IACzC;IAED,OAAO,KAAK;EAChB;AACH;AA1CD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NumberCoder = void 0;\nconst index_js_1 = require(\"../../utils/index.js\");\nconst typed_js_1 = require(\"../typed.js\");\nconst abstract_coder_js_1 = require(\"./abstract-coder.js\");\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nclass NumberCoder extends abstract_coder_js_1.Coder {\n    size;\n    signed;\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        (0, index_js_1.defineProperties)(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, _value) {\n        let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));\n        // Check bounds are safe for encoding\n        let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);\n        if (this.signed) {\n            let bounds = (0, index_js_1.mask)(maxUintValue, (this.size * 8) - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);\n        }\n        else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);\n        if (this.signed) {\n            value = (0, index_js_1.fromTwos)(value, this.size * 8);\n        }\n        return value;\n    }\n}\nexports.NumberCoder = NumberCoder;\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}