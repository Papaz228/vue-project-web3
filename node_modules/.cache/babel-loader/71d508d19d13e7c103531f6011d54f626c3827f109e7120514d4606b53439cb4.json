{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/esnext.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/esnext.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/esnext.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUrl = void 0;\nconst errors_js_1 = require(\"./errors.js\");\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\nasync function getUrl(req, _signal) {\n  const protocol = req.url.split(\":\")[0].toLowerCase();\n  (0, errors_js_1.assert)(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${protocol}`, \"UNSUPPORTED_OPERATION\", {\n    info: {\n      protocol\n    },\n    operation: \"request\"\n  });\n  (0, errors_js_1.assert)(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"request\"\n  });\n  let signal = undefined;\n  if (_signal) {\n    const controller = new AbortController();\n    signal = controller.signal;\n    _signal.addListener(() => {\n      controller.abort();\n    });\n  }\n  const init = {\n    method: req.method,\n    headers: new Headers(Array.from(req)),\n    body: req.body || undefined,\n    signal\n  };\n  const resp = await fetch(req.url, init);\n  const headers = {};\n  resp.headers.forEach((value, key) => {\n    headers[key.toLowerCase()] = value;\n  });\n  const respBody = await resp.arrayBuffer();\n  const body = respBody == null ? null : new Uint8Array(respBody);\n  return {\n    statusCode: resp.status,\n    statusMessage: resp.statusText,\n    headers,\n    body\n  };\n}\nexports.getUrl = getUrl;","map":{"version":3,"sources":["../../src.ts/utils/geturl-browser.ts"],"names":[],"mappings":";;;;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AA2BA;AAEO,eAAe,MAAM,CAAC,GAAiB,EAAE,OAA2B,EAAA;EACvE,MAAM,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;EAEpD,CAAA,CAAA,EAAA,WAAA,CAAA,MAAM,EAAC,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE,wBAAyB,QAAS,EAAE,EAAE,uBAAuB,EAAE;IAC/G,IAAI,EAAE;MAAE;IAAQ,CAAE;IAClB,SAAS,EAAE;GACd,CAAC;EAEF,CAAA,CAAA,EAAA,WAAA,CAAA,MAAM,EAAC,QAAQ,KAAK,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,2BAA2B,EAAE,6CAA6C,EAAE,uBAAuB,EAAE;IACxJ,SAAS,EAAE;GACd,CAAC;EAEF,IAAI,MAAM,GAA4B,SAAS;EAC/C,IAAI,OAAO,EAAE;IACT,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE;IACxC,MAAM,GAAG,UAAU,CAAC,MAAM;IAC1B,OAAO,CAAC,WAAW,CAAC,MAAK;MAAG,UAAU,CAAC,KAAK,EAAE;IAAE,CAAC,CAAC;EACrD;EAED,MAAM,IAAI,GAAG;IACT,MAAM,EAAE,GAAG,CAAC,MAAM;IAClB,OAAO,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,SAAS;IAC3B;GACH;EAED,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC;EAEvC,MAAM,OAAO,GAA2B,CAAA,CAAG;EAC3C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,KAAI;IAChC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG,KAAK;EACtC,CAAC,CAAC;EAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE;EACzC,MAAM,IAAI,GAAI,QAAQ,IAAI,IAAI,GAAI,IAAI,GAAE,IAAI,UAAU,CAAC,QAAQ,CAAC;EAEhE,OAAO;IACH,UAAU,EAAE,IAAI,CAAC,MAAM;IACvB,aAAa,EAAE,IAAI,CAAC,UAAU;IAC9B,OAAO;IAAE;GACZ;AACL;AAzCA,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUrl = void 0;\nconst errors_js_1 = require(\"./errors.js\");\n// @TODO: timeout is completely ignored; start a Promise.any with a reject?\nasync function getUrl(req, _signal) {\n    const protocol = req.url.split(\":\")[0].toLowerCase();\n    (0, errors_js_1.assert)(protocol === \"http\" || protocol === \"https\", `unsupported protocol ${protocol}`, \"UNSUPPORTED_OPERATION\", {\n        info: { protocol },\n        operation: \"request\"\n    });\n    (0, errors_js_1.assert)(protocol === \"https\" || !req.credentials || req.allowInsecureAuthentication, \"insecure authorized connections unsupported\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"request\"\n    });\n    let signal = undefined;\n    if (_signal) {\n        const controller = new AbortController();\n        signal = controller.signal;\n        _signal.addListener(() => { controller.abort(); });\n    }\n    const init = {\n        method: req.method,\n        headers: new Headers(Array.from(req)),\n        body: req.body || undefined,\n        signal\n    };\n    const resp = await fetch(req.url, init);\n    const headers = {};\n    resp.headers.forEach((value, key) => {\n        headers[key.toLowerCase()] = value;\n    });\n    const respBody = await resp.arrayBuffer();\n    const body = (respBody == null) ? null : new Uint8Array(respBody);\n    return {\n        statusCode: resp.status,\n        statusMessage: resp.statusText,\n        headers, body\n    };\n}\nexports.getUrl = getUrl;\n//# sourceMappingURL=geturl-browser.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}