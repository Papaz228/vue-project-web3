{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ripemd160 = void 0;\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _ripemd160 = function (data) {\n  return (0, ripemd160_1.ripemd160)(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nfunction ripemd160(_data) {\n  const data = (0, index_js_1.getBytes)(_data, \"data\");\n  return (0, index_js_1.hexlify)(__ripemd160(data));\n}\nexports.ripemd160 = ripemd160;\nripemd160._ = _ripemd160;\nripemd160.lock = function () {\n  locked = true;\n};\nripemd160.register = function (func) {\n  if (locked) {\n    throw new TypeError(\"ripemd160 is locked\");\n  }\n  __ripemd160 = func;\n};\nObject.freeze(ripemd160);","map":{"version":3,"sources":["../../src.ts/crypto/ripemd160.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAKA,IAAI,MAAM,GAAG,KAAK;AAElB,MAAM,UAAU,GAAG,SAAA,CAAS,IAAgB,EAAA;EACxC,OAAO,CAAA,CAAA,EAAA,WAAA,CAAA,SAAe,EAAC,IAAI,CAAC;AAChC,CAAC;AAED,IAAI,WAAW,GAAoC,UAAU;AAE7D;;;;;;;;;;;;;;;;AAgBG;AACH,SAAgB,SAAS,CAAC,KAAgB,EAAA;EACtC,MAAM,IAAI,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC;AAHA,OAAA,CAAA,SAAA,GAAA,SAAA;AAIA,SAAS,CAAC,CAAC,GAAG,UAAU;AACxB,SAAS,CAAC,IAAI,GAAG,YAAA;EAAmB,MAAM,GAAG,IAAI;AAAE,CAAC;AACpD,SAAS,CAAC,QAAQ,GAAG,UAAS,IAAqC,EAAA;EAC/D,IAAI,MAAM,EAAE;IAAE,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC;EAAG;EAC3D,WAAW,GAAG,IAAI;AACtB,CAAC;AACD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = void 0;\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _ripemd160 = function (data) {\n    return (0, ripemd160_1.ripemd160)(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nfunction ripemd160(_data) {\n    const data = (0, index_js_1.getBytes)(_data, \"data\");\n    return (0, index_js_1.hexlify)(__ripemd160(data));\n}\nexports.ripemd160 = ripemd160;\nripemd160._ = _ripemd160;\nripemd160.lock = function () { locked = true; };\nripemd160.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"ripemd160 is locked\");\n    }\n    __ripemd160 = func;\n};\nObject.freeze(ripemd160);\n//# sourceMappingURL=ripemd160.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}