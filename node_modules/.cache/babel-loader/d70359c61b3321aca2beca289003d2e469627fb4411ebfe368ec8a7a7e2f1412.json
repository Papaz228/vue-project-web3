{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport { mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      diplomaFile: null,\n      targetUser: ''\n    };\n  },\n  methods: {\n    ...mapActions(['saveAndMintNft']),\n    async uploadDiploma() {\n      try {\n        // Read the diploma file\n        const reader = new FileReader();\n        reader.onload = async () => {\n          const diplomaData = new Uint8Array(reader.result);\n\n          // Upload the diploma file to Pinata\n          const pinataAPIKey = '8eb6f3db6916d3c7ecba';\n          const pinataAPISecret = 'e1d0c01b1788a502a6d279c81369788efef055fe1f4ba2ce339d6483263c380a';\n          const formData = new FormData();\n          formData.append('file', new Blob([diplomaData]), this.diplomaFile.name);\n          const response = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n            method: 'POST',\n            headers: {\n              pinata_api_key: pinataAPIKey,\n              pinata_secret_api_key: pinataAPISecret\n            },\n            body: formData\n          });\n          if (response.ok) {\n            const data = await response.json();\n            const ipfsHash = data.IpfsHash;\n            // Process the IPFS hash as needed\n            await this.saveAndMintNft([ipfsHash, this.targetUser]);\n            console.log('IPFS Hash:', ipfsHash);\n          } else {\n            throw new Error('Error uploading diploma: ' + response.statusText);\n          }\n        };\n        reader.readAsArrayBuffer(this.diplomaFile);\n      } catch (error) {\n        console.error('Error uploading diploma:', error);\n      }\n    },\n    onFileChange(event) {\n      this.diplomaFile = event.target.files[0];\n    }\n  }\n};","map":{"version":3,"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/pages/AddDiplomaToUserPage.vue"],"names":[],"mappings":";;;AAUE,SAAS,UAAS,QAAS,MAAM;AAEjC,eAAe;EACb,IAAI,CAAA,EAAG;IACL,OAAO;MACL,WAAW,EAAE,IAAI;MACjB,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACP,GAAG,UAAU,CAAC,CAAC,gBAAgB,CAAC,CAAC;IACjC,MAAM,aAAa,CAAA,EAAG;MACpB,IAAI;QACF;QACA,MAAM,MAAK,GAAI,IAAI,UAAU,EAAE;QAC/B,MAAM,CAAC,MAAK,GAAI,YAAY;UAC1B,MAAM,WAAU,GAAI,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;;UAEjD;UACA,MAAM,YAAW,GAAI,sBAAsB;UAC3C,MAAM,eAAc,GAAI,kEAAkE;UAE1F,MAAM,QAAO,GAAI,IAAI,QAAQ,EAAE;UAC/B,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;UAEvE,MAAM,QAAO,GAAI,MAAM,KAAK,CAAC,gDAAgD,EAAE;YAC7E,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;cACP,cAAc,EAAE,YAAY;cAC5B,qBAAqB,EAAE;YACzB,CAAC;YACD,IAAI,EAAE;UACR,CAAC,CAAC;UAEF,IAAI,QAAQ,CAAC,EAAE,EAAE;YACf,MAAM,IAAG,GAAI,MAAM,QAAQ,CAAC,IAAI,EAAE;YAClC,MAAM,QAAO,GAAI,IAAI,CAAC,QAAQ;YAC9B;YACA,MAAM,IAAI,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC;UACrC,CAAA,MAAO;YACL,MAAM,IAAI,KAAK,CAAC,2BAA0B,GAAI,QAAQ,CAAC,UAAU,CAAC;UACpE;QACF,CAAC;QACD,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC;MAC5C,CAAA,CAAE,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC;MAClD;IACF,CAAC;IACD,YAAY,CAAC,KAAK,EAAE;MAClB,IAAI,CAAC,WAAU,GAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C;EACF;AACF,CAAC","sourcesContent":["<template>\n    <div class=\"upload-diploma\">\n      <label>Upload file</label>\n      <input type=\"file\" @change=\"onFileChange\" accept=\".pdf, .png, .jpg, .jpeg\" />\n      <input v-model=\"targetUser\" type=\"text\" placeholder=\"Enter target user address\" />\n      <button @click=\"uploadDiploma\" :disabled=\"!diplomaFile\">Upload Diploma</button>\n    </div>\n  </template>\n  \n  <script>\n  import { mapActions } from 'vuex';\n  \n  export default {\n    data() {\n      return {\n        diplomaFile: null,\n        targetUser: '',\n      };\n    },\n    methods: {\n      ...mapActions(['saveAndMintNft']),\n      async uploadDiploma() {\n        try {\n          // Read the diploma file\n          const reader = new FileReader();\n          reader.onload = async () => {\n            const diplomaData = new Uint8Array(reader.result);\n  \n            // Upload the diploma file to Pinata\n            const pinataAPIKey = '8eb6f3db6916d3c7ecba';\n            const pinataAPISecret = 'e1d0c01b1788a502a6d279c81369788efef055fe1f4ba2ce339d6483263c380a';\n  \n            const formData = new FormData();\n            formData.append('file', new Blob([diplomaData]), this.diplomaFile.name);\n  \n            const response = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n              method: 'POST',\n              headers: {\n                pinata_api_key: pinataAPIKey,\n                pinata_secret_api_key: pinataAPISecret,\n              },\n              body: formData,\n            });\n  \n            if (response.ok) {\n              const data = await response.json();\n              const ipfsHash = data.IpfsHash;\n              // Process the IPFS hash as needed\n              await this.saveAndMintNft([ipfsHash, this.targetUser]);\n              console.log('IPFS Hash:', ipfsHash);\n            } else {\n              throw new Error('Error uploading diploma: ' + response.statusText);\n            }\n          };\n          reader.readAsArrayBuffer(this.diplomaFile);\n        } catch (error) {\n          console.error('Error uploading diploma:', error);\n        }\n      },\n      onFileChange(event) {\n        this.diplomaFile = event.target.files[0];\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .upload-diploma {\n    text-align: center;\n    margin-top: 20px;\n  }\n  \n  label {\n    display: block;\n    margin-bottom: 10px;\n  }\n  \n  input[type=\"file\"] {\n    margin-bottom: 10px;\n  }\n  \n  button {\n    padding: 8px 16px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n  </style>\n  "],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}