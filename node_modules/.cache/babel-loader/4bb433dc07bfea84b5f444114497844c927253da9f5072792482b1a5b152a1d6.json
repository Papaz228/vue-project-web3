{"ast":null,"code":"\"use strict\";\n\n/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keccak256 = void 0;\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _keccak256 = function (data) {\n  return (0, sha3_1.keccak_256)(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nfunction keccak256(_data) {\n  const data = (0, index_js_1.getBytes)(_data, \"data\");\n  return (0, index_js_1.hexlify)(__keccak256(data));\n}\nexports.keccak256 = keccak256;\nkeccak256._ = _keccak256;\nkeccak256.lock = function () {\n  locked = true;\n};\nkeccak256.register = function (func) {\n  if (locked) {\n    throw new TypeError(\"keccak256 is locked\");\n  }\n  __keccak256 = func;\n};\nObject.freeze(keccak256);","map":{"version":3,"sources":["../../src.ts/crypto/keccak.ts"],"names":[],"mappings":";;AAAA;;;;AAIG;;;;;AAEH,MAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAKA,IAAI,MAAM,GAAG,KAAK;AAElB,MAAM,UAAU,GAAG,SAAA,CAAS,IAAgB,EAAA;EACxC,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,UAAU,EAAC,IAAI,CAAC;AAC3B,CAAC;AAED,IAAI,WAAW,GAAoC,UAAU;AAE7D;;;;;;;;;;;;;;;;;;;;;AAqBG;AACH,SAAgB,SAAS,CAAC,KAAgB,EAAA;EACtC,MAAM,IAAI,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC;AAHA,OAAA,CAAA,SAAA,GAAA,SAAA;AAIA,SAAS,CAAC,CAAC,GAAG,UAAU;AACxB,SAAS,CAAC,IAAI,GAAG,YAAA;EAAmB,MAAM,GAAG,IAAI;AAAE,CAAC;AACpD,SAAS,CAAC,QAAQ,GAAG,UAAS,IAAqC,EAAA;EAC/D,IAAI,MAAM,EAAE;IAAE,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC;EAAG;EAC3D,WAAW,GAAG,IAAI;AACtB,CAAC;AACD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keccak256 = void 0;\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _keccak256 = function (data) {\n    return (0, sha3_1.keccak_256)(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nfunction keccak256(_data) {\n    const data = (0, index_js_1.getBytes)(_data, \"data\");\n    return (0, index_js_1.hexlify)(__keccak256(data));\n}\nexports.keccak256 = keccak256;\nkeccak256._ = _keccak256;\nkeccak256.lock = function () { locked = true; };\nkeccak256.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"keccak256 is locked\");\n    }\n    __keccak256 = func;\n};\nObject.freeze(keccak256);\n//# sourceMappingURL=keccak.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}