{"ast":null,"code":"import { createStore } from \"vuex\";\nconst ethers = require('ethers');\nimport { USER_PROFILE_ABI } from \"@/contracts/UserProfile.abi.js\";\n//import {SKILL_CONFIRMATION_ABI} from \"@/contracts/SkillConfirmation.abi.js\"\n// import {TRUST_NETWORK_ABI} from \"@/contracts/TrustNetwork.abi.js\"\n\n//const skillConfirmationAddress = \"\"\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\";\n// const trustNetworkAddress = \"\"\n\nexport default createStore({\n  state: {\n    provider: {},\n    chainId: {},\n    signer: {},\n    UserProfileContract: {},\n    //SkillConfirmationContract: {},\n    //TrustNetworkContract: {},\n\n    userProfile: {},\n    userAddress: \"\",\n    skillRequests: [],\n    userProfiles: []\n  },\n  getters: {},\n  mutations: {},\n  actions: {\n    async connectWallet({\n      state\n    }) {\n      if (typeof window.ethereum !== 'undefined') {\n        console.log(\"Etherium client installed!\");\n        if (window.ethereum.isMetaMask === true) {\n          console.log(\"MetaMask connected!\");\n          if (window.ethereum.isConnected() !== true) {\n            console.log(\"MetaMask is not connected!\");\n            await window.ethereum.enable();\n          }\n          console.log(\"MetaMask connected\");\n        } else {\n          alert(\"Metamask is not installed!\");\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n      state.provider = new ethers.providers.Web3Provider(window.ethereum);\n      state.signer = await state.provider.getSigner();\n      state.userAddress = await state.signer.getAddress();\n      state.chainId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      state.UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n      //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n      //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n\n      console.log(\"chainId: \", state.chainId);\n      window.ethereum.on(\"accountsChanged\", async () => {\n        state.userAddress = await state.signer.getAddress();\n        console.log(`Accounts changed to ${state.address}`);\n      });\n      window.ethereum.on(\"chainChanged\", async () => {\n        state.provider = new ethers.providers.Web3Provider(window.ethereum);\n        state.chainId = await window.ethereum.request({\n          method: \"eth_chainId\"\n        });\n        state.signer = await state.provider.getSigner();\n        state.userAddress = await state.signer.getAddress();\n        state.UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n        //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n        //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n        console.log(\"chainId changed to \", state.chainId);\n      });\n    },\n    // Действия для взаимодействия с контрактами Ethereum\n    async createProfile({\n      state\n    }, profileData) {\n      try {\n        const tx = await state.UserProfileContract.createProfile(profileData);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error creating profile:\", error);\n        return false;\n      }\n    },\n    // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error requesting confirmation:\", error);\n    //     return false;\n    //   }\n    // },\n    // async confirmSkill({ state }, requestIndex) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error confirming skill:\", error);\n    //     return false;\n    //   }\n    // },\n    async rateSkill({\n      state\n    }, {\n      skillName,\n      rating,\n      comment,\n      targetUser\n    }) {\n      try {\n        const tx = await state.UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error rating skill:\", error);\n        return false;\n      }\n    },\n    async fetchUserProfile({\n      state\n    }, address) {\n      try {\n        const profile = await state.UserProfileContract.profiles(address);\n        state.userProfile = profile;\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n      }\n    },\n    // async fetchSkillRequests({ state }, address) {\n    //   try {\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(address);\n    //     state.skillRequests = requests;\n    //   } catch (error) {\n    //     console.error(\"Error fetching skill requests:\", error);\n    //   }\n    // },\n    async fetchAllUserSkills({\n      state\n    }, address) {\n      try {\n        const skills = await state.UserProfileContract.getUserSkills(address);\n        const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n        return uniqueSkills;\n      } catch (error) {\n        console.error(\"Error fetching skills:\", error);\n      }\n    },\n    async fetchAllUserProfiles({\n      state\n    }) {\n      try {\n        const users = await state.UserProfileContract.getAllUserProfiles();\n        state.userProfiles = users;\n      } catch (error) {\n        console.error(\"Error fetching user profiles:\", error);\n      }\n    },\n    async fetchAllUserRatings({\n      state\n    }, address) {\n      try {\n        const ratings = await state.UserProfileContract.getUserSkillRatings(address);\n        return ratings;\n      } catch (error) {\n        console.error(\"Error fetching ratings:\", error);\n      }\n    },\n    async getUserSkillRatingsAverage({\n      state\n    }, userProfileAddress) {\n      try {\n        const ratings = await state.UserProfileContract.getUserSkillRatings(userProfileAddress);\n        let totalRating = 0;\n        let ratingCount = 0;\n        for (const rating of ratings) {\n          totalRating += rating.rating;\n          ratingCount++;\n        }\n        const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n        return averageRating;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error);\n        return 0;\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","ethers","require","USER_PROFILE_ABI","userProfileAddress","state","provider","chainId","signer","UserProfileContract","userProfile","userAddress","skillRequests","userProfiles","getters","mutations","actions","connectWallet","window","ethereum","console","log","isMetaMask","isConnected","enable","alert","providers","Web3Provider","getSigner","getAddress","request","method","Contract","on","address","createProfile","profileData","tx","wait","error","rateSkill","skillName","rating","comment","targetUser","fetchUserProfile","profile","profiles","fetchAllUserSkills","skills","getUserSkills","uniqueSkills","filter","value","index","indexOf","fetchAllUserProfiles","users","getAllUserProfiles","fetchAllUserRatings","ratings","getUserSkillRatings","getUserSkillRatingsAverage","totalRating","ratingCount","averageRating","modules"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/store/index.js"],"sourcesContent":["import {createStore} from \"vuex\"\nconst ethers = require('ethers');\n\nimport {USER_PROFILE_ABI} from \"@/contracts/UserProfile.abi.js\"\n//import {SKILL_CONFIRMATION_ABI} from \"@/contracts/SkillConfirmation.abi.js\"\n// import {TRUST_NETWORK_ABI} from \"@/contracts/TrustNetwork.abi.js\"\n\n\n//const skillConfirmationAddress = \"\"\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\"\n// const trustNetworkAddress = \"\"\n\nexport default createStore({\n  state:{\n    provider:{},\n    chainId:{},\n    signer:{},\n\n    UserProfileContract: {},\n    //SkillConfirmationContract: {},\n    //TrustNetworkContract: {},\n\n    \n    userProfile: {},\n    userAddress:\"\",\n\n    skillRequests: [],\n    userProfiles: []\n  },\n\n  getters:{\n  },\n\n  mutations:{\n  },\n\n  actions:{\n    async connectWallet({state}) {\n      if (typeof window.ethereum !== 'undefined') {\n          console.log(\"Etherium client installed!\");\n          if (window.ethereum.isMetaMask === true) {\n              console.log(\"MetaMask connected!\");\n              if (window.ethereum.isConnected() !== true) {\n                  console.log(\"MetaMask is not connected!\");\n                  await window.ethereum.enable();\n              }\n              console.log(\"MetaMask connected\");\n          } else {\n              alert (\"Metamask is not installed!\")\n          }\n      } else {\n          alert (\"Ethereum client is not installed!\")\n      }\n      \n      state.provider = new ethers.providers.Web3Provider(window.ethereum);\n      state.signer = await state.provider.getSigner();\n      state.userAddress = await state.signer.getAddress()\n\n      state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n\n      state.UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n     //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n      //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n\n      console.log(\"chainId: \", state.chainId);\n\n      window.ethereum.on(\"accountsChanged\", async () => {\n        state.userAddress = await state.signer.getAddress()\n        console.log(`Accounts changed to ${state.address}`);\n      })\n\n      window.ethereum.on(\"chainChanged\", async () => {\n          state.provider = new ethers.providers.Web3Provider(window.ethereum);\n          state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n          state.signer = await state.provider.getSigner();\n          state.userAddress = await state.signer.getAddress()\n          state.UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n          //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n          //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n          console.log(\"chainId changed to \", state.chainId);\n      })\n  },\n    // Действия для взаимодействия с контрактами Ethereum\n      async createProfile({ state }, profileData) {\n        try {\n          const tx = await state.UserProfileContract.createProfile(profileData);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error creating profile:\", error);\n          return false;\n        }\n      },\n      // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error requesting confirmation:\", error);\n      //     return false;\n      //   }\n      // },\n      // async confirmSkill({ state }, requestIndex) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error confirming skill:\", error);\n      //     return false;\n      //   }\n      // },\n      async rateSkill({ state }, { skillName, rating, comment, targetUser }) {\n        try {\n          const tx = await state.UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error rating skill:\", error);\n          return false;\n        }\n      },\n      async fetchUserProfile({ state }, address) {\n        try {\n          const profile = await state.UserProfileContract.profiles(address);\n          state.userProfile = profile;\n        } catch (error) {\n          console.error(\"Error fetching user profile:\", error);\n        }\n      },\n      // async fetchSkillRequests({ state }, address) {\n      //   try {\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(address);\n      //     state.skillRequests = requests;\n      //   } catch (error) {\n      //     console.error(\"Error fetching skill requests:\", error);\n      //   }\n      // },\n      async fetchAllUserSkills({state}, address) {\n        try{\n          const skills = await state.UserProfileContract.getUserSkills(address);\n          const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n          return uniqueSkills;\n        } catch (error) {\n              console.error(\"Error fetching skills:\", error);\n            }\n      },\n      async fetchAllUserProfiles({state}){\n        try{\n          const users = await state.UserProfileContract.getAllUserProfiles();\n          state.userProfiles = users;\n        } catch (error) {\n          console.error(\"Error fetching user profiles:\", error);\n        }\n      },\n      async fetchAllUserRatings({state}, address) {\n        try{\n          const ratings = await state.UserProfileContract.getUserSkillRatings(address);\n          return ratings;\n        } catch (error) {\n              console.error(\"Error fetching ratings:\", error);\n        }\n      },\n      async getUserSkillRatingsAverage({state}, userProfileAddress) {\n        try {\n          const ratings = await state.UserProfileContract.getUserSkillRatings(userProfileAddress);\n          let totalRating = 0;\n          let ratingCount = 0;\n      \n          for (const rating of ratings) {\n            totalRating += rating.rating;\n            ratingCount++;\n          }\n      \n          const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n      \n          return averageRating;\n        } catch (error) {\n          console.error(\"Error fetching user skill ratings:\", error);\n          return 0;\n        }\n      },\n      \n  },\n\n  modules:{\n\n  }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}