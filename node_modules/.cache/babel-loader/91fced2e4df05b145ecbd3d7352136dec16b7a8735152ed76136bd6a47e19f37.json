{"ast":null,"code":"\"use strict\";\n\n/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider\n */\nvar _classPrivateFieldInitSpec = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldSet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _classPrivateFieldGet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SocketProvider = exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = void 0;\nconst abstract_provider_js_1 = require(\"./abstract-provider.js\");\nconst index_js_1 = require(\"../utils/index.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _filter = /*#__PURE__*/new WeakMap();\nvar _filterId = /*#__PURE__*/new WeakMap();\nvar _paused = /*#__PURE__*/new WeakMap();\nvar _emitPromise = /*#__PURE__*/new WeakMap();\nclass SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get filter() {\n    return JSON.parse(_classPrivateFieldGet(this, _filter));\n  }\n  /**\n   *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n   *  to %%filter%%.\n   */\n  constructor(provider, filter) {\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filterId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _paused, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _emitPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider, provider);\n    _classPrivateFieldSet(this, _filter, JSON.stringify(filter));\n    _classPrivateFieldSet(this, _filterId, null);\n    _classPrivateFieldSet(this, _paused, null);\n    _classPrivateFieldSet(this, _emitPromise, null);\n  }\n  start() {\n    _classPrivateFieldSet(this, _filterId, _classPrivateFieldGet(this, _provider).send(\"eth_subscribe\", this.filter).then(filterId => {\n      ;\n      _classPrivateFieldGet(this, _provider)._register(filterId, this);\n      return filterId;\n    }));\n  }\n  stop() {\n    _classPrivateFieldGet(this, _filterId).then(filterId => {\n      _classPrivateFieldGet(this, _provider).send(\"eth_unsubscribe\", [filterId]);\n    });\n    _classPrivateFieldSet(this, _filterId, null);\n  }\n  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n  //        and resume\n  pause(dropWhilePaused) {\n    (0, index_js_1.assert)(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"pause(false)\"\n    });\n    _classPrivateFieldSet(this, _paused, !!dropWhilePaused);\n  }\n  resume() {\n    _classPrivateFieldSet(this, _paused, null);\n  }\n  /**\n   *  @_ignore:\n   */\n  _handleMessage(message) {\n    if (_classPrivateFieldGet(this, _filterId) == null) {\n      return;\n    }\n    if (_classPrivateFieldGet(this, _paused) === null) {\n      let emitPromise = _classPrivateFieldGet(this, _emitPromise);\n      if (emitPromise == null) {\n        emitPromise = this._emit(_classPrivateFieldGet(this, _provider), message);\n      } else {\n        emitPromise = emitPromise.then(async () => {\n          await this._emit(_classPrivateFieldGet(this, _provider), message);\n        });\n      }\n      _classPrivateFieldSet(this, _emitPromise, emitPromise.then(() => {\n        if (_classPrivateFieldGet(this, _emitPromise) === emitPromise) {\n          _classPrivateFieldSet(this, _emitPromise, null);\n        }\n      }));\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to emit the events on the\n   *  provider.\n   */\n  async _emit(provider, message) {\n    throw new Error(\"sub-classes must implemente this; _emit\");\n  }\n}\nexports.SocketSubscriber = SocketSubscriber;\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nclass SocketBlockSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newHeads\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"block\", parseInt(message.number));\n  }\n}\nexports.SocketBlockSubscriber = SocketBlockSubscriber;\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nclass SocketPendingSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newPendingTransactions\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"pending\", message);\n  }\n}\nexports.SocketPendingSubscriber = SocketPendingSubscriber;\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nvar _logFilter = /*#__PURE__*/new WeakMap();\nclass SocketEventSubscriber extends SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get logFilter() {\n    return JSON.parse(_classPrivateFieldGet(this, _logFilter));\n  }\n  /**\n   *  @_ignore:\n   */\n  constructor(provider, filter) {\n    super(provider, [\"logs\", filter]);\n    _classPrivateFieldInitSpec(this, _logFilter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _logFilter, JSON.stringify(filter));\n  }\n  async _emit(provider, message) {\n    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n  }\n}\nexports.SocketEventSubscriber = SocketEventSubscriber;\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nvar _callbacks = /*#__PURE__*/new WeakMap();\nvar _subs = /*#__PURE__*/new WeakMap();\nvar _pending = /*#__PURE__*/new WeakMap();\nclass SocketProvider extends provider_jsonrpc_js_1.JsonRpcApiProvider {\n  // Maps each filterId to its subscriber\n\n  // If any events come in before a subscriber has finished\n  // registering, queue them\n\n  /**\n   *  Creates a new **SocketProvider** connected to %%network%%.\n   *\n   *  If unspecified, the network will be discovered.\n   */\n  constructor(network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n    _classPrivateFieldInitSpec(this, _callbacks, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _subs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _pending, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _callbacks, new Map());\n    _classPrivateFieldSet(this, _subs, new Map());\n    _classPrivateFieldSet(this, _pending, new Map());\n  }\n  // This value is only valid after _start has been called\n  /*\n  get _network(): Network {\n      if (this.#network == null) {\n          throw new Error(\"this shouldn't happen\");\n      }\n      return this.#network.clone();\n  }\n  */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"close\":\n        return new abstract_provider_js_1.UnmanagedSubscriber(\"close\");\n      case \"block\":\n        return new SocketBlockSubscriber(this);\n      case \"pending\":\n        return new SocketPendingSubscriber(this);\n      case \"event\":\n        return new SocketEventSubscriber(this, sub.filter);\n      case \"orphan\":\n        // Handled auto-matically within AbstractProvider\n        // when the log.removed = true\n        if (sub.filter.orphan === \"drop-log\") {\n          return new abstract_provider_js_1.UnmanagedSubscriber(\"drop-log\");\n        }\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Register a new subscriber. This is used internalled by Subscribers\n   *  and generally is unecessary unless extending capabilities.\n   */\n  _register(filterId, subscriber) {\n    _classPrivateFieldGet(this, _subs).set(filterId, subscriber);\n    const pending = _classPrivateFieldGet(this, _pending).get(filterId);\n    if (pending) {\n      for (const message of pending) {\n        subscriber._handleMessage(message);\n      }\n      _classPrivateFieldGet(this, _pending).delete(filterId);\n    }\n  }\n  async _send(payload) {\n    // WebSocket provider doesn't accept batches\n    (0, index_js_1.assertArgument)(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n    // @TODO: stringify payloads here and store to prevent mutations\n    // Prepare a promise to respond to\n    const promise = new Promise((resolve, reject) => {\n      _classPrivateFieldGet(this, _callbacks).set(payload.id, {\n        payload,\n        resolve,\n        reject\n      });\n    });\n    // Wait until the socket is connected before writing to it\n    await this._waitUntilReady();\n    // Write the request to the socket\n    await this._write(JSON.stringify(payload));\n    return [await promise];\n  }\n  // Sub-classes must call this once they are connected\n  /*\n  async _start(): Promise<void> {\n      if (this.#ready) { return; }\n       for (const { payload } of this.#callbacks.values()) {\n          await this._write(JSON.stringify(payload));\n      }\n       this.#ready = (async function() {\n          await super._start();\n      })();\n  }\n  */\n  /**\n   *  Sub-classes **must** call this with messages received over their\n   *  transport to be processed and dispatched.\n   */\n  async _processMessage(message) {\n    const result = JSON.parse(message);\n    if (result && typeof result === \"object\" && \"id\" in result) {\n      const callback = _classPrivateFieldGet(this, _callbacks).get(result.id);\n      if (callback == null) {\n        this.emit(\"error\", (0, index_js_1.makeError)(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n          reasonCode: \"UNKNOWN_ID\",\n          result\n        }));\n        return;\n      }\n      _classPrivateFieldGet(this, _callbacks).delete(result.id);\n      callback.resolve(result);\n    } else if (result && result.method === \"eth_subscription\") {\n      const filterId = result.params.subscription;\n      const subscriber = _classPrivateFieldGet(this, _subs).get(filterId);\n      if (subscriber) {\n        subscriber._handleMessage(result.params.result);\n      } else {\n        let pending = _classPrivateFieldGet(this, _pending).get(filterId);\n        if (pending == null) {\n          pending = [];\n          _classPrivateFieldGet(this, _pending).set(filterId, pending);\n        }\n        pending.push(result.params.result);\n      }\n    } else {\n      this.emit(\"error\", (0, index_js_1.makeError)(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n        reasonCode: \"UNEXPECTED_MESSAGE\",\n        result\n      }));\n      return;\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to send %%message%% over their\n   *  transport.\n   */\n  async _write(message) {\n    throw new Error(\"sub-classes must override this\");\n  }\n}\nexports.SocketProvider = SocketProvider;","map":{"version":3,"sources":["../../src.ts/providers/provider-socket.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;AASG;AATH,IAAA,0BAAA,GAAA,OAAA,kHAAA,OAAA;AAAA,IAAA,qBAAA,GAAA,OAAA,6GAAA,OAAA;AAAA,IAAA,qBAAA,GAAA,OAAA,6GAAA,OAAA;AAAA,OAAA;;;;;AAWA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AACA,MAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAgBA;;;AAGG;AAHH,IAAA,SAAA,oBAAA,OAAA;AAAA,IAAA,OAAA,oBAAA,OAAA;AAAA,IAAA,SAAA,oBAAA,OAAA;AAAA,IAAA,OAAA,oBAAA,OAAA;AAAA,IAAA,YAAA,oBAAA,OAAA;AAIA,MAAa,gBAAgB,CAAA;EAKzB;;AAEG;EACH,IAAI,MAAM,CAAA,EAAA;IAAiB,OAAO,IAAI,CAAC,KAAK,CAAA,qBAAA,CAAC,IAAI,EAAA,OAAA,EAAS;EAAE;EAO5D;;;AAGG;EACH,WAAA,CAAY,QAAwB,EAAE,MAAkB,EAAA;IAAA,0BAAA,OAAA,SAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,OAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,SAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,OAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,YAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IACpD,qBAAA,KAAI,EAAA,SAAA,EAAa,QAAQ;IACzB,qBAAA,KAAI,EAAA,OAAA,EAAW,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IACrC,qBAAA,KAAI,EAAA,SAAA,EAAa,IAAI;IACrB,qBAAA,KAAI,EAAA,OAAA,EAAW,IAAI;IACnB,qBAAA,KAAI,EAAA,YAAA,EAAgB,IAAI;EAC5B;EAEA,KAAK,CAAA,EAAA;IACD,qBAAA,KAAI,EAAA,SAAA,EAAa,qBAAA,KAAI,EAAA,SAAA,EAAW,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAE,QAAQ,IAAI;MAAE;MACnF,qBAAA,KAAI,EAAA,SAAA,EAAW,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC;MACxC,OAAO,QAAQ;IACnB,CAAC,CAAC;EACN;EAEA,IAAI,CAAA,EAAA;IACkB,qBAAA,CAAC,IAAI,EAAA,SAAA,EAAa,IAAI,CAAE,QAAQ,IAAI;MAClD,qBAAA,KAAI,EAAA,SAAA,EAAW,IAAI,CAAC,iBAAiB,EAAE,CAAE,QAAQ,CAAE,CAAC;IACxD,CAAC,CAAC;IACF,qBAAA,KAAI,EAAA,SAAA,EAAa,IAAI;EACzB;EAEA;EACA;EACA,KAAK,CAAC,eAAyB,EAAA;IAC3B,CAAA,CAAA,EAAA,UAAA,CAAA,MAAM,EAAC,eAAe,EAAE,kEAAkE,EACtF,uBAAuB,EAAE;MAAE,SAAS,EAAE;IAAc,CAAE,CAAC;IAC3D,qBAAA,KAAI,EAAA,OAAA,EAAW,CAAC,CAAC,eAAe;EACpC;EAEA,MAAM,CAAA,EAAA;IACF,qBAAA,KAAI,EAAA,OAAA,EAAW,IAAI;EACvB;EAEA;;AAEG;EACH,cAAc,CAAC,OAAY,EAAA;IACvB,IAAI,qBAAA,KAAI,EAAA,SAAA,KAAc,IAAI,EAAE;MAAE;IAAS;IACvC,IAAI,qBAAA,KAAI,EAAA,OAAA,MAAa,IAAI,EAAE;MACvB,IAAI,WAAW,GAAA,qBAAA,CAAyB,IAAI,EAAA,YAAA,CAAa;MACzD,IAAI,WAAW,IAAI,IAAI,EAAE;QACrB,WAAW,GAAG,IAAI,CAAC,KAAK,CAAA,qBAAA,CAAC,IAAI,EAAA,SAAA,GAAY,OAAO,CAAC;OACpD,MAAM;QACH,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,YAAW;UACtC,MAAM,IAAI,CAAC,KAAK,CAAA,qBAAA,CAAC,IAAI,EAAA,SAAA,GAAY,OAAO,CAAC;QAC7C,CAAC,CAAC;MACL;MACD,qBAAA,KAAI,EAAA,YAAA,EAAgB,WAAW,CAAC,IAAI,CAAC,MAAK;QACtC,IAAI,qBAAA,KAAI,EAAA,YAAA,MAAkB,WAAW,EAAE;UACnC,qBAAA,KAAI,EAAA,YAAA,EAAgB,IAAI;QAC3B;MACL,CAAC,CAAC;IACL;EACL;EAEA;;;AAGG;EACH,MAAM,KAAK,CAAC,QAAwB,EAAE,OAAY,EAAA;IAC9C,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;EAC9D;AACH;AAlFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAoFA;;;AAGG;AACH,MAAa,qBAAsB,SAAQ,gBAAgB,CAAA;EACvD;;AAEG;EACH,WAAA,CAAY,QAAwB,EAAA;IAChC,KAAK,CAAC,QAAQ,EAAE,CAAE,UAAU,CAAE,CAAC;EACnC;EAEA,MAAM,KAAK,CAAC,QAAwB,EAAE,OAAY,EAAA;IAC9C,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;EACpD;AACH;AAXD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAaA;;;AAGG;AACH,MAAa,uBAAwB,SAAQ,gBAAgB,CAAA;EAEzD;;AAEG;EACH,WAAA,CAAY,QAAwB,EAAA;IAChC,KAAK,CAAC,QAAQ,EAAE,CAAE,wBAAwB,CAAE,CAAC;EACjD;EAEA,MAAM,KAAK,CAAC,QAAwB,EAAE,OAAY,EAAA;IAC9C,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC;EACrC;AACH;AAZD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAcA;;AAEG;AAFH,IAAA,UAAA,oBAAA,OAAA;AAGA,MAAa,qBAAsB,SAAQ,gBAAgB,CAAA;EAGvD;;AAEG;EACH,IAAI,SAAS,CAAA,EAAA;IAAkB,OAAO,IAAI,CAAC,KAAK,CAAA,qBAAA,CAAC,IAAI,EAAA,UAAA,EAAY;EAAE;EAEnE;;AAEG;EACH,WAAA,CAAY,QAAwB,EAAE,MAAmB,EAAA;IACrD,KAAK,CAAC,QAAQ,EAAE,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC;IAAC,0BAAA,OAAA,UAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IACpC,qBAAA,KAAI,EAAA,UAAA,EAAc,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;EAC5C;EAEA,MAAM,KAAK,CAAC,QAAwB,EAAE,OAAY,EAAA;IAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;EAChF;AACH;AAnBD,OAAA,CAAA,qBAAA,GAAA,qBAAA;AAqBA;;;;AAIG;AAJH,IAAA,UAAA,oBAAA,OAAA;AAAA,IAAA,KAAA,oBAAA,OAAA;AAAA,IAAA,QAAA,oBAAA,OAAA;AAKA,MAAa,cAAe,SAAQ,qBAAA,CAAA,kBAAkB,CAAA;EAGlD;;EAGA;EACA;;EAGA;;;;AAIG;EACH,WAAA,CAAY,OAAoB,EAAA;IAC5B,KAAK,CAAC,OAAO,EAAE;MAAE,aAAa,EAAE;IAAC,CAAE,CAAC;IAAC,0BAAA,OAAA,UAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,KAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAAA,0BAAA,OAAA,QAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IACrC,qBAAA,KAAI,EAAA,UAAA,EAAc,IAAI,GAAG,EAAE;IAC3B,qBAAA,KAAI,EAAA,KAAA,EAAS,IAAI,GAAG,EAAE;IACtB,qBAAA,KAAI,EAAA,QAAA,EAAY,IAAI,GAAG,EAAE;EAC7B;EAEA;EACA;;;;;;;AAOE;EAEF,cAAc,CAAC,GAAiB,EAAA;IAC5B,QAAQ,GAAG,CAAC,IAAI;MACZ,KAAK,OAAO;QACR,OAAO,IAAI,sBAAA,CAAA,mBAAmB,CAAC,OAAO,CAAC;MAC3C,KAAK,OAAO;QACR,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC;MAC1C,KAAK,SAAS;QACV,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC;MAC5C,KAAK,OAAO;QACR,OAAO,IAAI,qBAAqB,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC;MACtD,KAAK,QAAQ;QACT;QACA;QACA,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE;UAClC,OAAO,IAAI,sBAAA,CAAA,mBAAmB,CAAC,UAAU,CAAC;;IAC7C;IAET,OAAO,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC;EACpC;EAEA;;;AAGG;EACH,SAAS,CAAC,QAAyB,EAAE,UAA4B,EAAA;IAC7D,qBAAA,KAAI,EAAA,KAAA,EAAO,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC;IACpC,MAAM,OAAO,GAAG,qBAAA,KAAI,EAAA,QAAA,EAAU,GAAG,CAAC,QAAQ,CAAC;IAC3C,IAAI,OAAO,EAAE;MACT,KAAK,MAAM,OAAO,IAAI,OAAO,EAAE;QAC3B,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC;MACrC;MACD,qBAAA,KAAI,EAAA,QAAA,EAAU,MAAM,CAAC,QAAQ,CAAC;IACjC;EACL;EAEA,MAAM,KAAK,CAAC,OAA+C,EAAA;IACvD;IACA,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,uCAAuC,EAAE,SAAS,EAAE,OAAO,CAAC;IAEpG;IAEA;IACA,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;MAC5C,qBAAA,KAAI,EAAA,UAAA,EAAY,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE;QAAE,OAAO;QAAE,OAAO;QAAE;MAAM,CAAE,CAAC;IACjE,CAAC,CAAC;IAEF;IACA,MAAM,IAAI,CAAC,eAAe,EAAE;IAE5B;IACA,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAE1C,OAA4C,CAAE,MAAM,OAAO,CAAE;EACjE;EAEA;EACA;;;;;;;;;;;EAcA;;;AAGG;EACH,MAAM,eAAe,CAAC,OAAe,EAAA;IACjC,MAAM,MAAM,GAAwD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAE;IAExF,IAAI,MAAM,IAAI,OAAO,MAAO,KAAK,QAAQ,IAAI,IAAI,IAAI,MAAM,EAAE;MACzD,MAAM,QAAQ,GAAG,qBAAA,KAAI,EAAA,UAAA,EAAY,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;MAC/C,IAAI,QAAQ,IAAI,IAAI,EAAE;QAClB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,SAAS,EAAC,gCAAgC,EAAE,eAAe,EAAE;UAC5E,UAAU,EAAE,YAAY;UACxB;SACH,CAAC,CAAC;QACH;MACH;MACD,qBAAA,KAAI,EAAA,UAAA,EAAY,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;MAEjC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC;KAE3B,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,kBAAkB,EAAE;MACvD,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY;MAC3C,MAAM,UAAU,GAAG,qBAAA,KAAI,EAAA,KAAA,EAAO,GAAG,CAAC,QAAQ,CAAC;MAC3C,IAAI,UAAU,EAAE;QACZ,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;OAClD,MAAM;QACH,IAAI,OAAO,GAAG,qBAAA,KAAI,EAAA,QAAA,EAAU,GAAG,CAAC,QAAQ,CAAC;QACzC,IAAI,OAAO,IAAI,IAAI,EAAE;UACjB,OAAO,GAAG,EAAG;UACb,qBAAA,KAAI,EAAA,QAAA,EAAU,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC;QACvC;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;MACrC;KAEJ,MAAM;MACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,SAAS,EAAC,6BAA6B,EAAE,eAAe,EAAE;QACzE,UAAU,EAAE,oBAAoB;QAChC;OACH,CAAC,CAAC;MACH;IACH;EACL;EAEA;;;AAGG;EACH,MAAM,MAAM,CAAC,OAAe,EAAA;IACxB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC;EACrD;AACH;AAxJD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SocketProvider = exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = void 0;\nconst abstract_provider_js_1 = require(\"./abstract-provider.js\");\nconst index_js_1 = require(\"../utils/index.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nclass SocketSubscriber {\n    #provider;\n    #filter;\n    /**\n     *  The filter.\n     */\n    get filter() { return JSON.parse(this.#filter); }\n    #filterId;\n    #paused;\n    #emitPromise;\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */\n    constructor(provider, filter) {\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n    start() {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {\n            ;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n    stop() {\n        (this.#filterId).then((filterId) => {\n            this.#provider.send(\"eth_unsubscribe\", [filterId]);\n        });\n        this.#filterId = null;\n    }\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused) {\n        (0, index_js_1.assert)(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\n        this.#paused = !!dropWhilePaused;\n    }\n    resume() {\n        this.#paused = null;\n    }\n    /**\n     *  @_ignore:\n     */\n    _handleMessage(message) {\n        if (this.#filterId == null) {\n            return;\n        }\n        if (this.#paused === null) {\n            let emitPromise = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            }\n            else {\n                emitPromise = emitPromise.then(async () => {\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(() => {\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */\n    async _emit(provider, message) {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\nexports.SocketSubscriber = SocketSubscriber;\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nclass SocketBlockSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider) {\n        super(provider, [\"newHeads\"]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\nexports.SocketBlockSubscriber = SocketBlockSubscriber;\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nclass SocketPendingSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider) {\n        super(provider, [\"newPendingTransactions\"]);\n    }\n    async _emit(provider, message) {\n        provider.emit(\"pending\", message);\n    }\n}\nexports.SocketPendingSubscriber = SocketPendingSubscriber;\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nclass SocketEventSubscriber extends SocketSubscriber {\n    #logFilter;\n    /**\n     *  The filter.\n     */\n    get logFilter() { return JSON.parse(this.#logFilter); }\n    /**\n     *  @_ignore:\n     */\n    constructor(provider, filter) {\n        super(provider, [\"logs\", filter]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n    async _emit(provider, message) {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\nexports.SocketEventSubscriber = SocketEventSubscriber;\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nclass SocketProvider extends provider_jsonrpc_js_1.JsonRpcApiProvider {\n    #callbacks;\n    // Maps each filterId to its subscriber\n    #subs;\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending;\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */\n    constructor(network) {\n        super(network, { batchMaxCount: 1 });\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */\n    _getSubscriber(sub) {\n        switch (sub.type) {\n            case \"close\":\n                return new abstract_provider_js_1.UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new abstract_provider_js_1.UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */\n    _register(filterId, subscriber) {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending) {\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n    async _send(payload) {\n        // WebSocket provider doesn't accept batches\n        (0, index_js_1.assertArgument)(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n        // @TODO: stringify payloads here and store to prevent mutations\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject) => {\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\n        });\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n        return [await promise];\n    }\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */\n    /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */\n    async _processMessage(message) {\n        const result = (JSON.parse(message));\n        if (result && typeof (result) === \"object\" && \"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", (0, index_js_1.makeError)(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            this.#callbacks.delete(result.id);\n            callback.resolve(result);\n        }\n        else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            }\n            else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n        }\n        else {\n            this.emit(\"error\", (0, index_js_1.makeError)(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */\n    async _write(message) {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\nexports.SocketProvider = SocketProvider;\n//# sourceMappingURL=provider-socket.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}