{"ast":null,"code":"import { mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      to: \"\",\n      value: \"\",\n      number: 0,\n      string: \"\",\n      numberForData: 0,\n      index: 0,\n      x: 0,\n      str: \"\",\n      data: 0\n    };\n  },\n  methods: {\n    ...mapActions({\n      connectWallet: \"connectWallet\",\n      sendTransaction: \"sendTransaction\",\n      deployContract: \"deployContract\",\n      setX: \"setX\",\n      setStr: \"setStr\",\n      addElem: \"addElem\",\n      getX: \"getX\",\n      getStr: \"getStr\",\n      getData: \"getData\"\n    }),\n    async sendTx() {\n      await this.sendTransaction(this.to, this.value);\n      this.to = \"\";\n      this.value = \"\";\n    },\n    async setToX() {\n      await this.setX(this.number);\n    },\n    async setToStr() {\n      await this.setStr(this.string);\n    },\n    async addElemToData() {\n      await this.addElem(this.numberForData);\n    },\n    async getXPage() {\n      this.x = await this.getX();\n    },\n    async getStrPage() {\n      this.str = await this.getStr();\n    },\n    async getDataPage() {\n      this.data = await this.getData(this.index);\n    }\n  }\n};","map":{"version":3,"names":["mapActions","data","to","value","number","string","numberForData","index","x","str","methods","connectWallet","sendTransaction","deployContract","setX","setStr","addElem","getX","getStr","getData","sendTx","setToX","setToStr","addElemToData","getXPage","getStrPage","getDataPage"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/pages/MainPage.vue"],"sourcesContent":["<template>\n    <div>Main page</div>\n    <h2>User address: {{ $store.state.wallet.address }}</h2>\n    <h2>User chain: {{ $store.state.wallet.chain }}</h2>\n    <h2>User chain id: {{ $store.state.wallet.chainId }}</h2>\n    <button @click=\"connectWallet\">Connect wallet</button>\n\n    <div>\n        <input v-model=\"to\" placeholder=\"To\" />\n    </div>\n    <div>\n        <input v-model=\"value\" placeholder=\"Value\" />\n    </div>\n    <button @click=\"sendTx\">Send</button>\n\n    <div>\n        <button @click=\"deployContract\">Deploy Contract</button>\n    </div>\n\n    <div>\n        <input v-model=\"number\" placeholder=\"Set x\" />\n    </div>\n    <button @click=\"setToX\">Set x</button>\n\n    <div>\n        <input v-model=\"string\" placeholder=\"Set str\" />\n    </div>\n    <button @click=\"setToStr\">Set str</button>\n\n    <div>\n        <input v-model=\"numberForData\" placeholder=\"Add Elem to data\" />\n    </div>\n    <button @click=\"addElemToData\">Add elem</button>\n\n    <div>\n        <button @click=\"getXPage\">Get x</button>\n        <button @click=\"getStrPage\">Get str</button>\n    </div>\n    <div>\n        <input v-model=\"index\" placeholder=\"Enter index for data\" />\n        <button @click=\"getDataPage\">Get data</button>\n    </div>\n\n    <div>\n        <h2>X: {{ x }}</h2>\n        <h2>String: {{ str }}</h2>\n        <h2>Data: {{ data }}</h2>\n    </div>\n\n    <div>\n        Tx hash:  <a :href=\"`/transactions/${$store.state.txHash}`\">{{ $store.state.txHash }}</a>\n    </div>\n\n\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nexport default {\n    data(){\n        return{\n            to:\"\",\n            value:\"\",\n            number: 0,\n            string: \"\",\n            numberForData: 0,\n            index: 0,\n\n            x: 0,\n            str: \"\",\n            data: 0\n        }\n    },\n    methods:{\n        ...mapActions({\n            connectWallet: \"connectWallet\",\n            sendTransaction: \"sendTransaction\",\n            deployContract: \"deployContract\",\n            setX: \"setX\",\n            setStr: \"setStr\",\n            addElem: \"addElem\",\n            getX: \"getX\",\n            getStr: \"getStr\",\n            getData: \"getData\"\n        }),\n        async sendTx(){\n            await this.sendTransaction(this.to, this.value)\n            this.to = \"\"\n            this.value = \"\"\n        },\n        async setToX(){\n            await this.setX(this.number)\n        },\n        async setToStr(){\n            await this.setStr(this.string)\n        },\n        async addElemToData(){\n            await this.addElem(this.numberForData)\n        },\n\n        async getXPage(){\n            this.x = await this.getX()\n        },\n\n        async getStrPage(){\n            this.str = await this.getStr()\n        },\n\n        async getDataPage(){\n            this.data = await this.getData(this.index)\n        }\n    }\n}\n</script>\n<style scoped>\n</style>"],"mappings":"AAyDA,SAASA,UAAS,QAAS,MAAK;AAChC,eAAe;EACXC,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,EAAE,EAAC,EAAE;MACLC,KAAK,EAAC,EAAE;MACRC,MAAM,EAAE,CAAC;MACTC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,CAAC;MAChBC,KAAK,EAAE,CAAC;MAERC,CAAC,EAAE,CAAC;MACJC,GAAG,EAAE,EAAE;MACPR,IAAI,EAAE;IACV;EACJ,CAAC;EACDS,OAAO,EAAC;IACJ,GAAGV,UAAU,CAAC;MACVW,aAAa,EAAE,eAAe;MAC9BC,eAAe,EAAE,iBAAiB;MAClCC,cAAc,EAAE,gBAAgB;MAChCC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE,SAAS;MAClBC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;IACb,CAAC,CAAC;IACF,MAAMC,MAAMA,CAAA,EAAE;MACV,MAAM,IAAI,CAACR,eAAe,CAAC,IAAI,CAACV,EAAE,EAAE,IAAI,CAACC,KAAK;MAC9C,IAAI,CAACD,EAAC,GAAI,EAAC;MACX,IAAI,CAACC,KAAI,GAAI,EAAC;IAClB,CAAC;IACD,MAAMkB,MAAMA,CAAA,EAAE;MACV,MAAM,IAAI,CAACP,IAAI,CAAC,IAAI,CAACV,MAAM;IAC/B,CAAC;IACD,MAAMkB,QAAQA,CAAA,EAAE;MACZ,MAAM,IAAI,CAACP,MAAM,CAAC,IAAI,CAACV,MAAM;IACjC,CAAC;IACD,MAAMkB,aAAaA,CAAA,EAAE;MACjB,MAAM,IAAI,CAACP,OAAO,CAAC,IAAI,CAACV,aAAa;IACzC,CAAC;IAED,MAAMkB,QAAQA,CAAA,EAAE;MACZ,IAAI,CAAChB,CAAA,GAAI,MAAM,IAAI,CAACS,IAAI,EAAC;IAC7B,CAAC;IAED,MAAMQ,UAAUA,CAAA,EAAE;MACd,IAAI,CAAChB,GAAE,GAAI,MAAM,IAAI,CAACS,MAAM,EAAC;IACjC,CAAC;IAED,MAAMQ,WAAWA,CAAA,EAAE;MACf,IAAI,CAACzB,IAAG,GAAI,MAAM,IAAI,CAACkB,OAAO,CAAC,IAAI,CAACZ,KAAK;IAC7C;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}