{"ast":null,"code":"\"use strict\";\n\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nvar _classPrivateFieldInitSpec = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Network = void 0;\nconst index_js_1 = require(\"../transaction/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst plugins_network_js_1 = require(\"./plugins-network.js\");\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nconst Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nvar _name = /*#__PURE__*/new WeakMap();\nvar _chainId = /*#__PURE__*/new WeakMap();\nvar _plugins = /*#__PURE__*/new WeakMap();\nclass Network {\n  /**\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\n   */\n  constructor(name, chainId) {\n    _classPrivateFieldInitSpec(this, _name, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _chainId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _plugins, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _name, name);\n    _classPrivateFieldSet(this, _chainId, (0, index_js_2.getBigInt)(chainId));\n    _classPrivateFieldSet(this, _plugins, new Map());\n  }\n  /**\n   *  Returns a JSON-compatible representation of a Network.\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      chainId: String(this.chainId)\n    };\n  }\n  /**\n   *  The network common name.\n   *\n   *  This is the canonical name, as networks migh have multiple\n   *  names.\n   */\n  get name() {\n    return _classPrivateFieldGet(this, _name);\n  }\n  set name(value) {\n    _classPrivateFieldSet(this, _name, value);\n  }\n  /**\n   *  The network chain ID.\n   */\n  get chainId() {\n    return _classPrivateFieldGet(this, _chainId);\n  }\n  set chainId(value) {\n    _classPrivateFieldSet(this, _chainId, (0, index_js_2.getBigInt)(value, \"chainId\"));\n  }\n  /**\n   *  Returns true if %%other%% matches this network. Any chain ID\n   *  must match, and if no chain ID is present, the name must match.\n   *\n   *  This method does not currently check for additional properties,\n   *  such as ENS address or plug-in compatibility.\n   */\n  matches(other) {\n    if (other == null) {\n      return false;\n    }\n    if (typeof other === \"string\") {\n      try {\n        return this.chainId === (0, index_js_2.getBigInt)(other);\n      } catch (error) {}\n      return this.name === other;\n    }\n    if (typeof other === \"number\" || typeof other === \"bigint\") {\n      try {\n        return this.chainId === (0, index_js_2.getBigInt)(other);\n      } catch (error) {}\n      return false;\n    }\n    if (typeof other === \"object\") {\n      if (other.chainId != null) {\n        try {\n          return this.chainId === (0, index_js_2.getBigInt)(other.chainId);\n        } catch (error) {}\n        return false;\n      }\n      if (other.name != null) {\n        return this.name === other.name;\n      }\n      return false;\n    }\n    return false;\n  }\n  /**\n   *  Returns the list of plugins currently attached to this Network.\n   */\n  get plugins() {\n    return Array.from(_classPrivateFieldGet(this, _plugins).values());\n  }\n  /**\n   *  Attach a new %%plugin%% to this Network. The network name\n   *  must be unique, excluding any fragment.\n   */\n  attachPlugin(plugin) {\n    if (_classPrivateFieldGet(this, _plugins).get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    _classPrivateFieldGet(this, _plugins).set(plugin.name, plugin.clone());\n    return this;\n  }\n  /**\n   *  Return the plugin, if any, matching %%name%% exactly. Plugins\n   *  with fragments will not be returned unless %%name%% includes\n   *  a fragment.\n   */\n  getPlugin(name) {\n    return _classPrivateFieldGet(this, _plugins).get(name) || null;\n  }\n  /**\n   *  Gets a list of all plugins that match %%name%%, with otr without\n   *  a fragment.\n   */\n  getPlugins(basename) {\n    return this.plugins.filter(p => p.name.split(\"#\")[0] === basename);\n  }\n  /**\n   *  Create a copy of this Network.\n   */\n  clone() {\n    const clone = new Network(this.name, this.chainId);\n    this.plugins.forEach(plugin => {\n      clone.attachPlugin(plugin.clone());\n    });\n    return clone;\n  }\n  /**\n   *  Compute the intrinsic gas required for a transaction.\n   *\n   *  A GasCostPlugin can be attached to override the default\n   *  values.\n   */\n  computeIntrinsicGas(tx) {\n    const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new plugins_network_js_1.GasCostPlugin();\n    let gas = costs.txBase;\n    if (tx.to == null) {\n      gas += costs.txCreate;\n    }\n    if (tx.data) {\n      for (let i = 2; i < tx.data.length; i += 2) {\n        if (tx.data.substring(i, i + 2) === \"00\") {\n          gas += costs.txDataZero;\n        } else {\n          gas += costs.txDataNonzero;\n        }\n      }\n    }\n    if (tx.accessList) {\n      const accessList = (0, index_js_1.accessListify)(tx.accessList);\n      for (const addr in accessList) {\n        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n      }\n    }\n    return gas;\n  }\n  /**\n   *  Returns a new Network for the %%network%% name or chainId.\n   */\n  static from(network) {\n    injectCommonNetworks();\n    // Default network\n    if (network == null) {\n      return Network.from(\"mainnet\");\n    }\n    // Canonical name or chain ID\n    if (typeof network === \"number\") {\n      network = BigInt(network);\n    }\n    if (typeof network === \"string\" || typeof network === \"bigint\") {\n      const networkFunc = Networks.get(network);\n      if (networkFunc) {\n        return networkFunc();\n      }\n      if (typeof network === \"bigint\") {\n        return new Network(\"unknown\", network);\n      }\n      (0, index_js_2.assertArgument)(false, \"unknown network\", \"network\", network);\n    }\n    // Clonable with network-like abilities\n    if (typeof network.clone === \"function\") {\n      const clone = network.clone();\n      //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n      //}\n      return clone;\n    }\n    // Networkish\n    if (typeof network === \"object\") {\n      (0, index_js_2.assertArgument)(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n      const custom = new Network(network.name, network.chainId);\n      if (network.ensAddress || network.ensNetwork != null) {\n        custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));\n      }\n      //if ((<any>network).layerOneConnection) {\n      //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n      //}\n      return custom;\n    }\n    (0, index_js_2.assertArgument)(false, \"invalid network\", \"network\", network);\n  }\n  /**\n   *  Register %%nameOrChainId%% with a function which returns\n   *  an instance of a Network representing that chain.\n   */\n  static register(nameOrChainId, networkFunc) {\n    if (typeof nameOrChainId === \"number\") {\n      nameOrChainId = BigInt(nameOrChainId);\n    }\n    const existing = Networks.get(nameOrChainId);\n    if (existing) {\n      (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n    }\n    Networks.set(nameOrChainId, networkFunc);\n  }\n}\nexports.Network = Network;\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    const func = function () {\n      const network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));\n      }\n      if (options.priorityFee) {\n        //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n      }\n      /*\n                  if (options.etherscan) {\n                      const { url, apiKey } = options.etherscan;\n                      network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                  }\n      */\n      network.attachPlugin(new plugins_network_js_1.GasCostPlugin());\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(name => {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {});\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"optimism-goerli\", 420, {\n    etherscan: {\n      url: \"https:/\\/api-goerli-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api.arbiscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {\n    etherscan: {\n      url: \"https:/\\/api-goerli.arbiscan.io/\"\n    }\n  });\n  // Polygon has a 35 gwei maxPriorityFee requirement\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api.polygonscan.com/\"\n    }\n  });\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api-testnet.polygonscan.com/\"\n    }\n  });\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1,\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api.bscscan.com\"\n    }\n  });\n  registerEth(\"bnbt\", 97, {\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api-testnet.bscscan.com\"\n    }\n  });\n}","map":{"version":3,"sources":["../../src.ts/providers/network.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Network = void 0;\nconst index_js_1 = require(\"../transaction/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst plugins_network_js_1 = require(\"./plugins-network.js\");\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nconst Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nclass Network {\n    #name;\n    #chainId;\n    #plugins;\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name, chainId) {\n        this.#name = name;\n        this.#chainId = (0, index_js_2.getBigInt)(chainId);\n        this.#plugins = new Map();\n    }\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON() {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name() { return this.#name; }\n    set name(value) { this.#name = value; }\n    /**\n     *  The network chain ID.\n     */\n    get chainId() { return this.#chainId; }\n    set chainId(value) { this.#chainId = (0, index_js_2.getBigInt)(value, \"chainId\"); }\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other) {\n        if (other == null) {\n            return false;\n        }\n        if (typeof (other) === \"string\") {\n            try {\n                return (this.chainId === (0, index_js_2.getBigInt)(other));\n            }\n            catch (error) { }\n            return (this.name === other);\n        }\n        if (typeof (other) === \"number\" || typeof (other) === \"bigint\") {\n            try {\n                return (this.chainId === (0, index_js_2.getBigInt)(other));\n            }\n            catch (error) { }\n            return false;\n        }\n        if (typeof (other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === (0, index_js_2.getBigInt)(other.chainId));\n                }\n                catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n        return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins() {\n        return Array.from(this.#plugins.values());\n    }\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin) {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin(name) {\n        return (this.#plugins.get(name)) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins(basename) {\n        return (this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n    /**\n     *  Create a copy of this Network.\n     */\n    clone() {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx) {\n        const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || (new plugins_network_js_1.GasCostPlugin());\n        let gas = costs.txBase;\n        if (tx.to == null) {\n            gas += costs.txCreate;\n        }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                }\n                else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n        if (tx.accessList) {\n            const accessList = (0, index_js_1.accessListify)(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n        return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network) {\n        injectCommonNetworks();\n        // Default network\n        if (network == null) {\n            return Network.from(\"mainnet\");\n        }\n        // Canonical name or chain ID\n        if (typeof (network) === \"number\") {\n            network = BigInt(network);\n        }\n        if (typeof (network) === \"string\" || typeof (network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) {\n                return networkFunc();\n            }\n            if (typeof (network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n            (0, index_js_2.assertArgument)(false, \"unknown network\", \"network\", network);\n        }\n        // Clonable with network-like abilities\n        if (typeof (network.clone) === \"function\") {\n            const clone = network.clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n        // Networkish\n        if (typeof (network) === \"object\") {\n            (0, index_js_2.assertArgument)(typeof (network.name) === \"string\" && typeof (network.chainId) === \"number\", \"invalid network object name or chainId\", \"network\", network);\n            const custom = new Network((network.name), (network.chainId));\n            if (network.ensAddress || network.ensNetwork != null) {\n                custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));\n            }\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n            return custom;\n        }\n        (0, index_js_2.assertArgument)(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId, networkFunc) {\n        if (typeof (nameOrChainId) === \"number\") {\n            nameOrChainId = BigInt(nameOrChainId);\n        }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\nexports.Network = Network;\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n    if (injected) {\n        return;\n    }\n    injected = true;\n    /// Register popular Ethereum networks\n    function registerEth(name, chainId, options) {\n        const func = function () {\n            const network = new Network(name, chainId);\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));\n            }\n            if (options.priorityFee) {\n                //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n            }\n            /*\n                        if (options.etherscan) {\n                            const { url, apiKey } = options.etherscan;\n                            network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                        }\n            */\n            network.attachPlugin(new plugins_network_js_1.GasCostPlugin());\n            return network;\n        };\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [\"homestead\"] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, {});\n    registerEth(\"classic\", 61, {});\n    registerEth(\"classicKotti\", 6, {});\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api-optimistic.etherscan.io/\" }\n    });\n    registerEth(\"optimism-goerli\", 420, {\n        etherscan: { url: \"https:/\\/api-goerli-optimistic.etherscan.io/\" }\n    });\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api.arbiscan.io/\" }\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {\n        etherscan: { url: \"https:/\\/api-goerli.arbiscan.io/\" }\n    });\n    // Polygon has a 35 gwei maxPriorityFee requirement\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n        //        priorityFee: 35000000000,\n        etherscan: {\n            //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api.polygonscan.com/\"\n        }\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [\"maticMumbai\", \"maticmum\"],\n        //        priorityFee: 35000000000,\n        etherscan: {\n            //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api-testnet.polygonscan.com/\"\n        }\n    });\n    registerEth(\"bnb\", 56, {\n        ensNetwork: 1,\n        etherscan: {\n            //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api.bscscan.com\"\n        }\n    });\n    registerEth(\"bnbt\", 97, {\n        etherscan: {\n            //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api-testnet.bscscan.com\"\n        }\n    });\n}\n//# sourceMappingURL=network.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}