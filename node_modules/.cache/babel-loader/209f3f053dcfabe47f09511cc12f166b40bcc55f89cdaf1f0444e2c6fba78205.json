{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", null, \"Upload file\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", null, \"Rating (1-5):\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.onFileChange && $options.onFileChange(...args)),\n    accept: \".pdf, .png, .jpg, .jpeg\"\n  }, null, 32 /* HYDRATE_EVENTS */), _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.targetUser = $event),\n    type: \"text\",\n    placeholder: \"Enter target user address\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.targetUser]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.uploadDiploma && $options.uploadDiploma(...args)),\n    disabled: !$data.diplomaFile\n  }, \"Upload Diploma\", 8 /* PROPS */, _hoisted_3)]);\n}","map":{"version":3,"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/pages/AddDiplomaToUserPage.vue"],"names":[],"mappings":";gCAEM,mBAAA,CAA0B,OAAA,EAAA,IAAA,EAAnB,aAAW,EAAA,CAAA,CAAA,CAAA,cAAA;gCAElB,mBAAA,CAA4B,OAAA,EAAA,IAAA,EAArB,eAAa,EAAA,CAAA,CAAA,CAAA,cAAA;;;uBAHtB,mBAAA,CAMM,KAAA,EAAA,IAAA,EAAA,CALJ,UAA0B,EAC1B,mBAAA,CAA6E,OAAA,EAAA;IAAtE,IAAI,EAAC,MAAM;IAAE,QAAM,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,KAAE,QAAA,CAAA,YAAA,IAAA,QAAA,CAAA,YAAA,CAAA,GAAA,IAAA,CAAY,CAAA;IAAE,MAAM,EAAC;qCACjD,UAA4B,E,gBAC5B,mBAAA,CAAiF,OAAA,EAAA;+DAAjE,KAAA,CAAA,UAAU,GAAA,MAAA,CAAA;IAAE,IAAI,EAAC,MAAM;IAAC,WAAW,EAAC;iDAApC,KAAA,CAAA,UAAU,CAAA,C,GAC1B,mBAAA,CAA+E,QAAA,EAAA;IAAtE,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,KAAE,QAAA,CAAA,aAAA,IAAA,QAAA,CAAA,aAAA,CAAA,GAAA,IAAA,CAAa,CAAA;IAAG,QAAQ,EAAA,CAAG,KAAA,CAAA;KAAa,gBAAc,EAAA,CAAA,CAAA,aAAA,UAAA,CAAA,C","sourcesContent":["<template>\n    <div>\n      <label>Upload file</label>\n      <input type=\"file\" @change=\"onFileChange\" accept=\".pdf, .png, .jpg, .jpeg\" />\n      <label>Rating (1-5):</label>\n      <input v-model=\"targetUser\" type=\"text\" placeholder=\"Enter target user address\"/>\n      <button @click=\"uploadDiploma\" :disabled=\"!diplomaFile\">Upload Diploma</button>\n    </div>\n  </template>\n  \n  <script>\n  import { create } from 'pinata-client';\n  import { mapActions } from 'vuex'\n\n  export default {\n    data() {\n      return {\n        diplomaFile: null,\n        targetUser: ''\n      };\n    },\n    methods: {\n    ...mapActions(['saveAndMintNft']),\n      onFileChange(event) {\n        this.diplomaFile = event.target.files[0];\n      },\n      async uploadDiploma() {\n        try {\n          // Connect to Pinata\n          const pinata = create(process.env.VUE_APP_PINATA_API_KEY, process.env.VUE_APP_PINATA_API_SECRET);\n  \n          // Read the diploma file\n          const reader = new FileReader();\n          reader.onload = async () => {\n            const diplomaData = new Uint8Array(reader.result);\n  \n            // Upload the diploma file to Pinata\n            const result = await pinata.pinFileToIPFS(diplomaData);\n            const ipfsHash = result.IpfsHash;\n            //save\n            this.saveAndMintNft([ipfsHash, this.targetUser])\n            console.log('IPFS Hash:', ipfsHash);\n          };\n          reader.readAsArrayBuffer(this.diplomaFile);\n        } catch (error) {\n          console.error('Error uploading diploma:', error);\n        }\n      },\n    },\n  };\n  </script>\n  "],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}