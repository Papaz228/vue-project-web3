{"ast":null,"code":"\"use strict\";\n\n/* Browser Crypto Shims */\nrequire(\"core-js/modules/esnext.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/esnext.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/esnext.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBytes = exports.pbkdf2Sync = exports.createHmac = exports.createHash = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst index_js_1 = require(\"../utils/index.js\");\nfunction getGlobal() {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nfunction createHash(algo) {\n  switch (algo) {\n    case \"sha256\":\n      return sha256_1.sha256.create();\n    case \"sha512\":\n      return sha512_1.sha512.create();\n  }\n  (0, index_js_1.assertArgument)(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\nexports.createHash = createHash;\nfunction createHmac(_algo, key) {\n  const algo = {\n    sha256: sha256_1.sha256,\n    sha512: sha512_1.sha512\n  }[_algo];\n  (0, index_js_1.assertArgument)(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n  return hmac_1.hmac.create(algo, key);\n}\nexports.createHmac = createHmac;\nfunction pbkdf2Sync(password, salt, iterations, keylen, _algo) {\n  const algo = {\n    sha256: sha256_1.sha256,\n    sha512: sha512_1.sha512\n  }[_algo];\n  (0, index_js_1.assertArgument)(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n  return (0, pbkdf2_1.pbkdf2)(algo, password, salt, {\n    c: iterations,\n    dkLen: keylen\n  });\n}\nexports.pbkdf2Sync = pbkdf2Sync;\nfunction randomBytes(length) {\n  (0, index_js_1.assert)(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"randomBytes\"\n  });\n  (0, index_js_1.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return result;\n}\nexports.randomBytes = randomBytes;","map":{"version":3,"sources":["../../src.ts/crypto/crypto-browser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/* Browser Crypto Shims */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.pbkdf2Sync = exports.createHmac = exports.createHash = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst index_js_1 = require(\"../utils/index.js\");\nfunction getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nfunction createHash(algo) {\n    switch (algo) {\n        case \"sha256\": return sha256_1.sha256.create();\n        case \"sha512\": return sha512_1.sha512.create();\n    }\n    (0, index_js_1.assertArgument)(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\nexports.createHash = createHash;\nfunction createHmac(_algo, key) {\n    const algo = ({ sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo]);\n    (0, index_js_1.assertArgument)(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n    return hmac_1.hmac.create(algo, key);\n}\nexports.createHmac = createHmac;\nfunction pbkdf2Sync(password, salt, iterations, keylen, _algo) {\n    const algo = ({ sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo]);\n    (0, index_js_1.assertArgument)(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n    return (0, pbkdf2_1.pbkdf2)(algo, password, salt, { c: iterations, dkLen: keylen });\n}\nexports.pbkdf2Sync = pbkdf2Sync;\nfunction randomBytes(length) {\n    (0, index_js_1.assert)(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"randomBytes\"\n    });\n    (0, index_js_1.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return result;\n}\nexports.randomBytes = randomBytes;\n//# sourceMappingURL=crypto-browser.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}