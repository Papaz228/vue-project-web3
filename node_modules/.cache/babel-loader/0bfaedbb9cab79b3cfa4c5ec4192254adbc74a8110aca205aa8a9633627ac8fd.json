{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayCoder = exports.unpack = exports.pack = void 0;\nconst index_js_1 = require(\"../../utils/index.js\");\nconst typed_js_1 = require(\"../typed.js\");\nconst abstract_coder_js_1 = require(\"./abstract-coder.js\");\nconst anonymous_js_1 = require(\"./anonymous.js\");\n/**\n *  @_ignore\n */\nfunction pack(writer, coders, values) {\n  let arrayValues = [];\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    let unique = {};\n    arrayValues = coders.map(coder => {\n      const name = coder.localName;\n      (0, index_js_1.assert)(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", {\n        argument: \"values\",\n        info: {\n          coder\n        },\n        value: values\n      });\n      (0, index_js_1.assert)(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", {\n        argument: \"values\",\n        info: {\n          coder\n        },\n        value: values\n      });\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    (0, index_js_1.assertArgument)(false, \"invalid tuple value\", \"tuple\", values);\n  }\n  (0, index_js_1.assertArgument)(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n  let staticWriter = new abstract_coder_js_1.Writer();\n  let dynamicWriter = new abstract_coder_js_1.Writer();\n  let updateFuncs = [];\n  coders.forEach((coder, index) => {\n    let value = arrayValues[index];\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      let dynamicOffset = dynamicWriter.length;\n      // Encode the dynamic value into the dynamicWriter\n      coder.encode(dynamicWriter, value);\n      // Prepare to populate the correct offset once we are done\n      let updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(baseOffset => {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  });\n  // Backfill all the dynamic offsets, now that we know the static length\n  updateFuncs.forEach(func => {\n    func(staticWriter.length);\n  });\n  let length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexports.pack = pack;\n/**\n *  @_ignore\n */\nfunction unpack(reader, coders) {\n  let values = [];\n  let keys = [];\n  // A reader anchored to this base\n  let baseReader = reader.subReader(0);\n  coders.forEach(coder => {\n    let value = null;\n    if (coder.dynamic) {\n      let offset = reader.readIndex();\n      let offsetReader = baseReader.subReader(offset);\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n    if (value == undefined) {\n      throw new Error(\"investigate\");\n    }\n    values.push(value);\n    keys.push(coder.localName || null);\n  });\n  return abstract_coder_js_1.Result.fromItems(values, keys);\n}\nexports.unpack = unpack;\n/**\n *  @_ignore\n */\nclass ArrayCoder extends abstract_coder_js_1.Coder {\n  constructor(coder, length, localName) {\n    const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    const dynamic = length === -1 || coder.dynamic;\n    super(\"array\", type, localName, dynamic);\n    _defineProperty(this, \"coder\", void 0);\n    _defineProperty(this, \"length\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      coder,\n      length\n    });\n  }\n  defaultValue() {\n    // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n    const defaultChild = this.coder.defaultValue();\n    const result = [];\n    for (let i = 0; i < this.length; i++) {\n      result.push(defaultChild);\n    }\n    return result;\n  }\n  encode(writer, _value) {\n    const value = typed_js_1.Typed.dereference(_value, \"array\");\n    if (!Array.isArray(value)) {\n      this._throwError(\"expected array value\", value);\n    }\n    let count = this.length;\n    if (count === -1) {\n      count = value.length;\n      writer.writeValue(value.length);\n    }\n    (0, index_js_1.assertArgumentCount)(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n    let coders = [];\n    for (let i = 0; i < value.length; i++) {\n      coders.push(this.coder);\n    }\n    return pack(writer, coders, value);\n  }\n  decode(reader) {\n    let count = this.length;\n    if (count === -1) {\n      count = reader.readIndex();\n      // Check that there is *roughly* enough data to ensure\n      // stray random data is not being read as a length. Each\n      // slot requires at least 32 bytes for their value (or 32\n      // bytes as a link to the data). This could use a much\n      // tighter bound, but we are erroring on the side of safety.\n      (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", {\n        buffer: reader.bytes,\n        offset: count * abstract_coder_js_1.WordSize,\n        length: reader.dataLength\n      });\n    }\n    let coders = [];\n    for (let i = 0; i < count; i++) {\n      coders.push(new anonymous_js_1.AnonymousCoder(this.coder));\n    }\n    return unpack(reader, coders);\n  }\n}\nexports.ArrayCoder = ArrayCoder;","map":{"version":3,"sources":["../../../src.ts/abi/coders/array.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCoder = exports.unpack = exports.pack = void 0;\nconst index_js_1 = require(\"../../utils/index.js\");\nconst typed_js_1 = require(\"../typed.js\");\nconst abstract_coder_js_1 = require(\"./abstract-coder.js\");\nconst anonymous_js_1 = require(\"./anonymous.js\");\n/**\n *  @_ignore\n */\nfunction pack(writer, coders, values) {\n    let arrayValues = [];\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            (0, index_js_1.assert)(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            (0, index_js_1.assert)(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        (0, index_js_1.assertArgument)(false, \"invalid tuple value\", \"tuple\", values);\n    }\n    (0, index_js_1.assertArgument)(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n    let staticWriter = new abstract_coder_js_1.Writer();\n    let dynamicWriter = new abstract_coder_js_1.Writer();\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexports.pack = pack;\n/**\n *  @_ignore\n */\nfunction unpack(reader, coders) {\n    let values = [];\n    let keys = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n    return abstract_coder_js_1.Result.fromItems(values, keys);\n}\nexports.unpack = unpack;\n/**\n *  @_ignore\n */\nclass ArrayCoder extends abstract_coder_js_1.Coder {\n    coder;\n    length;\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        (0, index_js_1.defineProperties)(this, { coder, length });\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, _value) {\n        const value = typed_js_1.Typed.dereference(_value, \"array\");\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        (0, index_js_1.assertArgumentCount)(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * abstract_coder_js_1.WordSize, length: reader.dataLength });\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new anonymous_js_1.AnonymousCoder(this.coder));\n        }\n        return unpack(reader, coders);\n    }\n}\nexports.ArrayCoder = ArrayCoder;\n//# sourceMappingURL=array.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}