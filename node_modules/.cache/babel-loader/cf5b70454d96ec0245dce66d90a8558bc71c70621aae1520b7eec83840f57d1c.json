{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from \"vuex\";\nimport { ethers } from \"ethers\";\nimport { USER_PROFILE_ABI } from \"@/contracts/UserProfile.abi.js\";\nconst userProfileAddress = \"0xddAce096b2C2F7E871Bf5FaB393D566D7C885C9d\";\nlet UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI);\nlet provider;\nlet signer;\nexport default createStore({\n  state: {\n    chainId: {},\n    userProfile: {},\n    userAddress: \"\",\n    skillRequests: [],\n    userProfiles: []\n  },\n  getters: {},\n  mutations: {},\n  actions: {\n    async connectWallet({\n      state\n    }) {\n      if (typeof window.ethereum !== 'undefined') {\n        console.log(\"Etherium client installed!\");\n        if (window.ethereum.isMetaMask === true) {\n          console.log(\"MetaMask connected!\");\n          if (window.ethereum.isConnected() !== true) {\n            console.log(\"MetaMask is not connected!\");\n            await window.ethereum.enable();\n          }\n          console.log(\"MetaMask connected\");\n          provider = new ethers.providers.Web3Provider(window.ethereum);\n          signer = await provider.getSigner();\n          state.userAddress = await signer.getAddress();\n          state.chainId = await window.ethereum.request({\n            method: \"eth_chainId\"\n          });\n          console.log(\"chainId: \", state.chainId);\n          UserProfileContract = UserProfileContract.connect(signer);\n          window.ethereum.on(\"accountsChanged\", async () => {\n            state.userAddress = await signer.getAddress();\n            console.log(`Accounts changed to ${state.address}`);\n          });\n          window.ethereum.on(\"chainChanged\", async () => {\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            state.chainId = await window.ethereum.request({\n              method: \"eth_chainId\"\n            });\n            signer = await provider.getSigner();\n            state.userAddress = await signer.getAddress();\n            console.log(\"chainId changed to \", state.chainId);\n          });\n        } else {\n          alert(\"Metamask is not installed!\");\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n    },\n    // Действия для взаимодействия с контрактами Ethereum\n    async createProfile({\n      state\n    }, args) {\n      try {\n        const [nameProfile, contactInfo, socialLinks] = args;\n        const tx = await UserProfileContract.createProfile(nameProfile, contactInfo, socialLinks);\n        await tx.wait();\n        state.userProfiles.push({\n          name: nameProfile,\n          contactInformation: contactInfo,\n          socialLinks: socialLinks,\n          userProfileAddress: state.userAddress\n        });\n        return true;\n      } catch (error) {\n        console.error(\"Error creating profile:\", error);\n        return false;\n      }\n    },\n    async rateSkill({\n      state\n    }, args) {\n      try {\n        const [skillName, rating, comment, targetUser] = args;\n        const tx = await UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error rating skill:\", error, state.userAddress);\n        return false;\n      }\n    },\n    async addSkill({\n      state\n    }, skillName) {\n      try {\n        const tx = await UserProfileContract.addSkill(skillName);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error add skill:\", error, state.userAddress);\n        return false;\n      }\n    },\n    async fetchUserProfile({\n      state\n    }, address) {\n      try {\n        const profile = await UserProfileContract.profiles(address);\n        state.userProfile = profile;\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n      }\n    },\n    async fetchAllUserSkills({\n      state\n    }, address) {\n      try {\n        const skills = await UserProfileContract.getUserSkills(address);\n        const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n        return uniqueSkills;\n      } catch (error) {\n        console.error(\"Error fetching skills:\", error, state.userAddress);\n      }\n    },\n    async fetchAllUserProfiles({\n      state\n    }) {\n      try {\n        const users = await UserProfileContract.getAllUserProfiles();\n        state.userProfiles = users;\n      } catch (error) {\n        console.error(\"Error fetching user profiles:\", error);\n      }\n    },\n    async fetchAllUserRatings({\n      state\n    }, address) {\n      try {\n        const ratings = await UserProfileContract.getUserSkillRatings(address);\n        return ratings;\n      } catch (error) {\n        console.error(\"Error fetching ratings:\", error, state.userAddress);\n      }\n    },\n    async getUserSkillRatingsAverage({\n      state\n    }, address) {\n      try {\n        const ratings = await UserProfileContract.getUserSkillRatings(address);\n        let totalRating = 0;\n        let ratingCount = 0;\n        for (const rating of ratings) {\n          totalRating += rating.rating;\n          ratingCount++;\n        }\n        const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n        return averageRating;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error, state.userAddress);\n        return 0;\n      }\n    }\n    // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error requesting confirmation:\", error);\n    //     return false;\n    //   }\n    // },\n    // async confirmSkill({ state }, requestIndex) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error confirming skill:\", error);\n    //     return false;\n    //   }\n    // },\n  },\n\n  modules: {}\n});","map":{"version":3,"names":["createStore","ethers","USER_PROFILE_ABI","userProfileAddress","UserProfileContract","Contract","provider","signer","state","chainId","userProfile","userAddress","skillRequests","userProfiles","getters","mutations","actions","connectWallet","window","ethereum","console","log","isMetaMask","isConnected","enable","providers","Web3Provider","getSigner","getAddress","request","method","connect","on","address","alert","createProfile","args","nameProfile","contactInfo","socialLinks","tx","wait","push","name","contactInformation","error","rateSkill","skillName","rating","comment","targetUser","addSkill","fetchUserProfile","profile","profiles","fetchAllUserSkills","skills","getUserSkills","uniqueSkills","filter","value","index","indexOf","fetchAllUserProfiles","users","getAllUserProfiles","fetchAllUserRatings","ratings","getUserSkillRatings","getUserSkillRatingsAverage","totalRating","ratingCount","averageRating","modules"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/store/index.js"],"sourcesContent":["import {createStore} from \"vuex\"\nimport { ethers } from \"ethers\";\n\nimport {USER_PROFILE_ABI} from \"@/contracts/UserProfile.abi.js\"\n\n\n\nconst userProfileAddress = \"0xddAce096b2C2F7E871Bf5FaB393D566D7C885C9d\"\nlet UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI)\nlet provider\nlet signer\n\nexport default createStore({\n  state:{\n    chainId:{},\n\n\n    \n    userProfile: {},\n    userAddress:\"\",\n\n    skillRequests: [],\n    userProfiles: []\n  },\n\n  getters:{\n  },\n\n  mutations:{\n  },\n\n  actions:{\n    async connectWallet({state}) {\n      if (typeof window.ethereum !== 'undefined') {\n          console.log(\"Etherium client installed!\");\n          if (window.ethereum.isMetaMask === true) {\n              console.log(\"MetaMask connected!\");\n              if (window.ethereum.isConnected() !== true) {\n                  console.log(\"MetaMask is not connected!\");\n                  await window.ethereum.enable();\n              }\n      console.log(\"MetaMask connected\");\n      provider = new ethers.providers.Web3Provider(window.ethereum);\n      signer = await provider.getSigner();\n      state.userAddress = await signer.getAddress()\n      \n      state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n\n      console.log(\"chainId: \", state.chainId);\n      UserProfileContract = UserProfileContract.connect(signer)\n      window.ethereum.on(\"accountsChanged\", async () => {\n        state.userAddress = await signer.getAddress()\n        console.log(`Accounts changed to ${state.address}`);\n      })\n\n      window.ethereum.on(\"chainChanged\", async () => {\n          provider = new ethers.providers.Web3Provider(window.ethereum);\n          state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n          signer = await provider.getSigner();\n          state.userAddress = await signer.getAddress()\n\n          console.log(\"chainId changed to \", state.chainId);\n      })\n          } else {\n              alert (\"Metamask is not installed!\")\n          }\n      } else {\n          alert (\"Ethereum client is not installed!\")\n      }\n    \n  },\n    // Действия для взаимодействия с контрактами Ethereum\n      async createProfile({state}, args) {\n        try {\n          const [nameProfile, contactInfo, socialLinks] = args\n          const tx = await UserProfileContract.createProfile(nameProfile, contactInfo, socialLinks);\n          await tx.wait();\n          state.userProfiles.push({name: nameProfile, contactInformation: contactInfo, socialLinks: socialLinks, userProfileAddress: state.userAddress})\n          return true;\n        } catch (error) {\n          console.error(\"Error creating profile:\", error);\n          return false;\n\n        }\n      },\n      async rateSkill({state}, args) {\n        try {\n          const [skillName, rating, comment, targetUser] = args\n          const tx = await UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error rating skill:\", error, state.userAddress);\n          return false;\n        }\n      },\n      async addSkill({state}, skillName) {\n        try{\n          const tx = await UserProfileContract.addSkill(skillName);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error add skill:\", error, state.userAddress);\n          return false;\n        }\n      },\n      async fetchUserProfile({ state }, address) {\n        try {\n          const profile = await UserProfileContract.profiles(address);\n          state.userProfile = profile;\n        } catch (error) {\n          console.error(\"Error fetching user profile:\", error);\n        }\n      },\n      async fetchAllUserSkills({state}, address) {\n        try{\n          const skills = await UserProfileContract.getUserSkills(address);\n          const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n          return uniqueSkills;\n        } catch (error) {\n              console.error(\"Error fetching skills:\", error, state.userAddress);\n            }\n      },\n      async fetchAllUserProfiles({state}){\n        try{\n          const users = await UserProfileContract.getAllUserProfiles();\n          \n          state.userProfiles = users;\n        } catch (error) {\n          console.error(\"Error fetching user profiles:\", error);\n        }\n      },\n      async fetchAllUserRatings({state}, address) {\n        try{\n          const ratings = await UserProfileContract.getUserSkillRatings(address);\n          return ratings;\n        } catch (error) {\n              console.error(\"Error fetching ratings:\", error, state.userAddress);\n        }\n      },\n      async getUserSkillRatingsAverage({state}, address) {\n        try {\n          const ratings = await UserProfileContract.getUserSkillRatings(address);\n          let totalRating = 0;\n          let ratingCount = 0;\n      \n          for (const rating of ratings) {\n            totalRating += rating.rating;\n            ratingCount++;\n          }\n      \n          const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n      \n          return averageRating;\n        } catch (error) {\n          console.error(\"Error fetching user skill ratings:\", error, state.userAddress);\n          return 0;\n        }\n      },\n       // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error requesting confirmation:\", error);\n      //     return false;\n      //   }\n      // },\n      // async confirmSkill({ state }, requestIndex) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error confirming skill:\", error);\n      //     return false;\n      //   }\n      // },\n      \n  },\n\n  modules:{\n\n  }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}