{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/esnext.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/esnext.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/esnext.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBytes = void 0;\n/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nconst crypto_js_1 = require(\"./crypto.js\");\nlet locked = false;\nconst _randomBytes = function (length) {\n  return new Uint8Array((0, crypto_js_1.randomBytes)(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nfunction randomBytes(length) {\n  return __randomBytes(length);\n}\nexports.randomBytes = randomBytes;\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function () {\n  locked = true;\n};\nrandomBytes.register = function (func) {\n  if (locked) {\n    throw new Error(\"randomBytes is locked\");\n  }\n  __randomBytes = func;\n};\nObject.freeze(randomBytes);","map":{"version":3,"sources":["../../src.ts/crypto/random.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;AAOG;AACH,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA,IAAI,MAAM,GAAG,KAAK;AAElB,MAAM,YAAY,GAAG,SAAA,CAAS,MAAc,EAAA;EACxC,OAAO,IAAI,UAAU,CAAC,CAAA,CAAA,EAAA,WAAA,CAAA,WAAa,EAAC,MAAM,CAAC,CAAC;AAChD,CAAC;AAED,IAAI,aAAa,GAAG,YAAY;AAEhC;;;;;;AAMG;AACH,SAAgB,WAAW,CAAC,MAAc,EAAA;EACtC,OAAO,aAAa,CAAC,MAAM,CAAC;AAChC;AAFA,OAAA,CAAA,WAAA,GAAA,WAAA;AAIA,WAAW,CAAC,CAAC,GAAG,YAAY;AAC5B,WAAW,CAAC,IAAI,GAAG,YAAA;EAAmB,MAAM,GAAG,IAAI;AAAE,CAAC;AACtD,WAAW,CAAC,QAAQ,GAAG,UAAS,IAAoC,EAAA;EAChE,IAAI,MAAM,EAAE;IAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC;EAAG;EACzD,aAAa,GAAG,IAAI;AACxB,CAAC;AACD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = void 0;\n/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nconst crypto_js_1 = require(\"./crypto.js\");\nlet locked = false;\nconst _randomBytes = function (length) {\n    return new Uint8Array((0, crypto_js_1.randomBytes)(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nfunction randomBytes(length) {\n    return __randomBytes(length);\n}\nexports.randomBytes = randomBytes;\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function () { locked = true; };\nrandomBytes.register = function (func) {\n    if (locked) {\n        throw new Error(\"randomBytes is locked\");\n    }\n    __randomBytes = func;\n};\nObject.freeze(randomBytes);\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}