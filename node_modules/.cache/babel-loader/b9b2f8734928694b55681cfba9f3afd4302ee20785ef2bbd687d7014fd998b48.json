{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TupleCoder = void 0;\nconst properties_js_1 = require(\"../../utils/properties.js\");\nconst typed_js_1 = require(\"../typed.js\");\nconst abstract_coder_js_1 = require(\"./abstract-coder.js\");\nconst array_js_1 = require(\"./array.js\");\n/**\n *  @_ignore\n */\nclass TupleCoder extends abstract_coder_js_1.Coder {\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    _defineProperty(this, \"coders\", void 0);\n    (0, properties_js_1.defineProperties)(this, {\n      coders: Object.freeze(coders.slice())\n    });\n  }\n  defaultValue() {\n    const values = [];\n    this.coders.forEach(coder => {\n      values.push(coder.defaultValue());\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = this.coders.reduce((accum, coder) => {\n      const name = coder.localName;\n      if (name) {\n        if (!accum[name]) {\n          accum[name] = 0;\n        }\n        accum[name]++;\n      }\n      return accum;\n    }, {});\n    // Add named values\n    this.coders.forEach((coder, index) => {\n      let name = coder.localName;\n      if (!name || uniqueNames[name] !== 1) {\n        return;\n      }\n      if (name === \"length\") {\n        name = \"_length\";\n      }\n      if (values[name] != null) {\n        return;\n      }\n      values[name] = values[index];\n    });\n    return Object.freeze(values);\n  }\n  encode(writer, _value) {\n    const value = typed_js_1.Typed.dereference(_value, \"tuple\");\n    return (0, array_js_1.pack)(writer, this.coders, value);\n  }\n  decode(reader) {\n    return (0, array_js_1.unpack)(reader, this.coders);\n  }\n}\nexports.TupleCoder = TupleCoder;","map":{"version":3,"sources":["../../../src.ts/abi/coders/tuple.ts"],"names":[],"mappings":";;;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAIA;;AAEG;AACH,MAAa,UAAW,SAAQ,mBAAA,CAAA,KAAK,CAAA;EAGjC,WAAA,CAAY,MAAoB,EAAE,SAAiB,EAAA;IAC/C,IAAI,OAAO,GAAG,KAAK;IACnB,MAAM,KAAK,GAAkB,EAAE;IAC/B,MAAM,CAAC,OAAO,CAAE,KAAK,IAAI;MACrB,IAAI,KAAK,CAAC,OAAO,EAAE;QAAE,OAAO,GAAG,IAAI;MAAG;MACtC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC;IACF,MAAM,IAAI,GAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAI;IAE/C,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC;IAAC,eAAA;IACzC,CAAA,CAAA,EAAA,eAAA,CAAA,gBAAgB,EAAa,IAAI,EAAE;MAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;IAAC,CAAE,CAAC;EACjF;EAEA,YAAY,CAAA,EAAA;IACR,MAAM,MAAM,GAAQ,EAAG;IACvB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE,KAAK,IAAI;MAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC,CAAC;IAEF;IACA,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;MACpD,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS;MAC5B,IAAI,IAAI,EAAE;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;UAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;QAAG;QACtC,KAAK,CAAC,IAAI,CAAC,EAAE;MAChB;MACD,OAAO,KAAK;IAChB,CAAC,EAAgC,CAAA,CAAG,CAAC;IAErC;IACA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAY,EAAE,KAAa,KAAI;MAChD,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS;MAC1B,IAAI,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAAE;MAAS;MAEjD,IAAI,IAAI,KAAK,QAAQ,EAAE;QAAE,IAAI,GAAG,SAAS;MAAG;MAE5C,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;QAAE;MAAS;MAErC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;IAChC,CAAC,CAAC;IAEF,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;EAChC;EAEA,MAAM,CAAC,MAAc,EAAE,MAAsD,EAAA;IACzE,MAAM,KAAK,GAAG,UAAA,CAAA,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC;IAChD,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,IAAI,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;EAC3C;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,MAAM,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC;EACtC;AACH;AAvDD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TupleCoder = void 0;\nconst properties_js_1 = require(\"../../utils/properties.js\");\nconst typed_js_1 = require(\"../typed.js\");\nconst abstract_coder_js_1 = require(\"./abstract-coder.js\");\nconst array_js_1 = require(\"./array.js\");\n/**\n *  @_ignore\n */\nclass TupleCoder extends abstract_coder_js_1.Coder {\n    coders;\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        (0, properties_js_1.defineProperties)(this, { coders: Object.freeze(coders.slice()) });\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, _value) {\n        const value = typed_js_1.Typed.dereference(_value, \"tuple\");\n        return (0, array_js_1.pack)(writer, this.coders, value);\n    }\n    decode(reader) {\n        return (0, array_js_1.unpack)(reader, this.coders);\n    }\n}\nexports.TupleCoder = TupleCoder;\n//# sourceMappingURL=tuple.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}