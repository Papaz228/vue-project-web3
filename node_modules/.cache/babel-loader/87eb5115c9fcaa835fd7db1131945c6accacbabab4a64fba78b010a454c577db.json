{"ast":null,"code":"import { createStore } from \"vuex\";\nconst Web3 = require('web3');\nimport { ABI } from \"@/contracts/Example.abi.js\";\nimport { bytecode } from \"@/contracts/Example.bin.js\";\nexport default createStore({\n  state: {\n    web3Wallet: {},\n    wallet: {\n      address: \"\",\n      chainId: \"\",\n      chain: \"\"\n    },\n    contractAddress: \"\",\n    myContract: new web3Wallet.eth.Contract(ABI, state.contractAddress)\n    // txHash: \"\"\n  },\n\n  getters: {},\n  mutations: {},\n  actions: {\n    async connectWallet({\n      state\n    }) {\n      if (typeof window.ethereum !== 'undefined') {\n        if (window.ethereum.isMetaMask === true) {\n          if (window.ethereum.isConnected() === true) {\n            console.log(\"Metamask connected!\");\n          } else {\n            console.log(\"Metamask is not connected!\");\n            await window.ethereum.enable();\n            console.log(\"Metamask connected!\");\n          }\n          window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          }).then(accounts => {\n            state.wallet.address = accounts[0];\n          });\n          state.web3Wallet = new Web3(window.ethereum);\n          state.wallet.chainId = await state.web3Wallet.eth.net.getId();\n          state.wallet.chain = await state.web3Wallet.eth.net.getNetworkType();\n          window.ethereum.on('accountsChanged', accounts => {\n            state.wallet.address = accounts[0];\n          });\n          window.ethereum.on('chainChanged', async () => {\n            state.web3Wallet = new Web3(window.ethereum);\n            state.wallet.chainId = await state.web3Wallet.eth.net.getId();\n            state.wallet.chain = await state.web3Wallet.eth.net.getNetworkType();\n          });\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n    },\n    // async getTransaction({state}, transactionHash){\n    //   state.web3Wallet = new Web3(window.ethereum)\n    //   return await state.web3Wallet.eth.getTransaction(transactionHash)\n    // },\n    // async sendTransaction({state}, to, value){\n    //   value = state.web3Wallet.utils.numberToHex(value)\n    //   await window.ethereum.request({\n    //     method: \"eth_sendTransaction\",\n    //     params: [{\n    //     from: state.wallet.address,\n    //     to: to,\n    //     value: value\n    //     }]\n    //     }).then(hash => {\n    //       state.txHash = hash\n    //       })\n    // },\n    async deployContract({\n      state\n    }) {\n      const receipt = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: state.wallet.address,\n          data: bytecode\n        }]\n      });\n\n      // Wait for the transaction to be confirmed\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const txReceipt = await window.ethereum.request({\n          method: 'eth_getTransactionReceipt',\n          params: [receipt]\n        });\n        if (txReceipt !== null) {\n          state.contractAddress = txReceipt.contractAddress;\n          console.log(\"Contract deployed at address: \", state.contractAddress);\n          break;\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n      state.myContract = new state.web3Wallet.eth.Contract(ABI, state.contractAddress);\n    },\n    async setX({\n      state\n    }, number) {\n      let txData = state.myContract.methods.setX(number).encodeABI();\n      await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: state.wallet.address,\n          to: state.contractAddress,\n          data: txData\n        }]\n      }).then(hash => {\n        state.txHash = hash;\n      });\n    },\n    async setStr({\n      state\n    }, str) {\n      let txData = state.myContract.methods.setStr(str).encodeABI();\n      await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: state.wallet.address,\n          to: state.contractAddress,\n          data: txData\n        }]\n      }).then(hash => {\n        state.txHash = hash;\n      });\n    },\n    async addElem({\n      state\n    }, elem) {\n      let txData = state.myContract.methods.addElem(elem).encodeABI();\n      await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: state.wallet.address,\n          to: state.contractAddress,\n          data: txData\n        }]\n      }).then(hash => {\n        state.txHash = hash;\n      });\n    },\n    async getX({\n      state\n    }) {\n      console.log(state.contractAddress);\n      return await state.myContract.methods.x().call({\n        from: state.wallet.address\n      }).then(hash => {\n        state.txHash = hash;\n      });\n    },\n    async getStr({\n      state\n    }) {\n      return await state.myContract.methods.str().call({\n        from: state.wallet.address\n      }).then(hash => {\n        state.txHash = hash;\n      });\n    },\n    async getData({\n      state\n    }, index) {\n      return await state.myContract.methods.data(index).call({\n        from: state.wallet.address\n      }).then(hash => {\n        state.txHash = hash;\n      });\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","Web3","require","ABI","bytecode","state","web3Wallet","wallet","address","chainId","chain","contractAddress","myContract","eth","Contract","getters","mutations","actions","connectWallet","window","ethereum","isMetaMask","isConnected","console","log","enable","request","method","then","accounts","net","getId","getNetworkType","on","alert","deployContract","receipt","params","from","data","txReceipt","Promise","resolve","setTimeout","setX","number","txData","methods","encodeABI","to","hash","txHash","setStr","str","addElem","elem","getX","x","call","getStr","getData","index","modules"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/store/index.js"],"sourcesContent":["import {createStore} from \"vuex\"\nconst Web3 = require('web3')\nimport {ABI} from \"@/contracts/Example.abi.js\"\nimport {bytecode} from \"@/contracts/Example.bin.js\"\n\n\n\nexport default createStore({\n  state:{\n    web3Wallet: {},\n    wallet: {\n      address: \"\",\n      chainId: \"\",\n      chain: \"\"\n    },\n    contractAddress: \"\",\n    myContract: new web3Wallet.eth.Contract(ABI, state.contractAddress),\n    // txHash: \"\"\n  },\n\n  getters:{\n  },\n\n  mutations:{\n  },\n\n  actions:{\n    async connectWallet({state}){\n      if (typeof window.ethereum !== 'undefined') {\n        if (window.ethereum.isMetaMask === true) {\n          if (window.ethereum.isConnected() === true) {\n            console.log(\"Metamask connected!\")\n           }\n           else {\n            console.log(\"Metamask is not connected!\")\n            await window.ethereum.enable()\n            console.log(\"Metamask connected!\")\n           }\n\n           window.ethereum.request({method: \"eth_requestAccounts\"}).then(accounts => {\n            state.wallet.address = accounts[0]\n          })\n\n            state.web3Wallet = new Web3(window.ethereum)\n\n            state.wallet.chainId = await state.web3Wallet.eth.net.getId()\n            state.wallet.chain = await state.web3Wallet.eth.net.getNetworkType()\n\n          window.ethereum.on('accountsChanged', (accounts) =>{\n            state.wallet.address = accounts[0]\n          })\n\n          window.ethereum.on('chainChanged', async () =>{\n            state.web3Wallet = new Web3(window.ethereum)\n            state.wallet.chainId = await state.web3Wallet.eth.net.getId()\n            state.wallet.chain = await state.web3Wallet.eth.net.getNetworkType()\n          })\n         }         \n       }\n        else{\n        alert(\"Ethereum client is not installed!\")\n        }\n    },\n    // async getTransaction({state}, transactionHash){\n    //   state.web3Wallet = new Web3(window.ethereum)\n    //   return await state.web3Wallet.eth.getTransaction(transactionHash)\n    // },\n    // async sendTransaction({state}, to, value){\n    //   value = state.web3Wallet.utils.numberToHex(value)\n    //   await window.ethereum.request({\n    //     method: \"eth_sendTransaction\",\n    //     params: [{\n    //     from: state.wallet.address,\n    //     to: to,\n    //     value: value\n    //     }]\n    //     }).then(hash => {\n    //       state.txHash = hash\n    //       })\n    // },\n    async deployContract({state}){\n      const receipt = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: state.wallet.address,\n          data: bytecode\n        }]\n      })\n      \n      // Wait for the transaction to be confirmed\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const txReceipt = await window.ethereum.request({\n          method: 'eth_getTransactionReceipt',\n          params: [receipt]\n        });\n      \n        if (txReceipt !== null) {\n          state.contractAddress = txReceipt.contractAddress;\n          console.log(\"Contract deployed at address: \", state.contractAddress);\n          break;\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n      state.myContract = new state.web3Wallet.eth.Contract(ABI, state.contractAddress)\n    },\n\n    async setX({state}, number){\n        let txData = state.myContract.methods.setX(number).encodeABI()\n\n        await window.ethereum.request({\n          method: \"eth_sendTransaction\",\n          params: [{\n            from: state.wallet.address,\n            to: state.contractAddress,\n            data: txData\n          }]\n          }).then(hash => {\n            state.txHash = hash\n            })\n    },\n    async setStr({state}, str){\n      let txData = state.myContract.methods.setStr(str).encodeABI()\n\n      await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: state.wallet.address,\n          to: state.contractAddress,\n          data: txData\n        }]\n        }).then(hash => {\n          state.txHash = hash\n          })\n  },\n  async addElem({state}, elem){\n    let txData = state.myContract.methods.addElem(elem).encodeABI()\n\n    await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [{\n        from: state.wallet.address,\n        to: state.contractAddress,\n        data: txData\n      }]\n      }).then(hash => {\n        state.txHash = hash\n        })\n},\n\n  async getX({state}){\n    console.log(state.contractAddress)\n    return await state.myContract.methods.x().call({from: state.wallet.address}).then(hash => {\n      state.txHash = hash\n      })\n  },\n  async getStr({state}){\n    return await state.myContract.methods.str().call({from: state.wallet.address}).then(hash => {\n      state.txHash = hash\n      })\n  },\n  async getData({state}, index){\n    return await state.myContract.methods.data(index).call({from: state.wallet.address}).then(hash => {\n      state.txHash = hash\n      })\n  },\n\n  },\n\n  modules:{\n\n  }\n})"],"mappings":"AAAA,SAAQA,WAAW,QAAO,MAAM;AAChC,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,SAAQC,GAAG,QAAO,4BAA4B;AAC9C,SAAQC,QAAQ,QAAO,4BAA4B;AAInD,eAAeJ,WAAW,CAAC;EACzBK,KAAK,EAAC;IACJC,UAAU,EAAE,CAAC,CAAC;IACdC,MAAM,EAAE;MACNC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE;IACT,CAAC;IACDC,eAAe,EAAE,EAAE;IACnBC,UAAU,EAAE,IAAIN,UAAU,CAACO,GAAG,CAACC,QAAQ,CAACX,GAAG,EAAEE,KAAK,CAACM,eAAe;IAClE;EACF,CAAC;;EAEDI,OAAO,EAAC,CACR,CAAC;EAEDC,SAAS,EAAC,CACV,CAAC;EAEDC,OAAO,EAAC;IACN,MAAMC,aAAaA,CAAC;MAACb;IAAK,CAAC,EAAC;MAC1B,IAAI,OAAOc,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;QAC1C,IAAID,MAAM,CAACC,QAAQ,CAACC,UAAU,KAAK,IAAI,EAAE;UACvC,IAAIF,MAAM,CAACC,QAAQ,CAACE,WAAW,EAAE,KAAK,IAAI,EAAE;YAC1CC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;UACnC,CAAC,MACI;YACJD,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;YACzC,MAAML,MAAM,CAACC,QAAQ,CAACK,MAAM,EAAE;YAC9BF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;UACnC;UAEAL,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;YAACC,MAAM,EAAE;UAAqB,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;YACzExB,KAAK,CAACE,MAAM,CAACC,OAAO,GAAGqB,QAAQ,CAAC,CAAC,CAAC;UACpC,CAAC,CAAC;UAEAxB,KAAK,CAACC,UAAU,GAAG,IAAIL,IAAI,CAACkB,MAAM,CAACC,QAAQ,CAAC;UAE5Cf,KAAK,CAACE,MAAM,CAACE,OAAO,GAAG,MAAMJ,KAAK,CAACC,UAAU,CAACO,GAAG,CAACiB,GAAG,CAACC,KAAK,EAAE;UAC7D1B,KAAK,CAACE,MAAM,CAACG,KAAK,GAAG,MAAML,KAAK,CAACC,UAAU,CAACO,GAAG,CAACiB,GAAG,CAACE,cAAc,EAAE;UAEtEb,MAAM,CAACC,QAAQ,CAACa,EAAE,CAAC,iBAAiB,EAAGJ,QAAQ,IAAI;YACjDxB,KAAK,CAACE,MAAM,CAACC,OAAO,GAAGqB,QAAQ,CAAC,CAAC,CAAC;UACpC,CAAC,CAAC;UAEFV,MAAM,CAACC,QAAQ,CAACa,EAAE,CAAC,cAAc,EAAE,YAAW;YAC5C5B,KAAK,CAACC,UAAU,GAAG,IAAIL,IAAI,CAACkB,MAAM,CAACC,QAAQ,CAAC;YAC5Cf,KAAK,CAACE,MAAM,CAACE,OAAO,GAAG,MAAMJ,KAAK,CAACC,UAAU,CAACO,GAAG,CAACiB,GAAG,CAACC,KAAK,EAAE;YAC7D1B,KAAK,CAACE,MAAM,CAACG,KAAK,GAAG,MAAML,KAAK,CAACC,UAAU,CAACO,GAAG,CAACiB,GAAG,CAACE,cAAc,EAAE;UACtE,CAAC,CAAC;QACH;MACF,CAAC,MACI;QACJE,KAAK,CAAC,mCAAmC,CAAC;MAC1C;IACJ,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,cAAcA,CAAC;MAAC9B;IAAK,CAAC,EAAC;MAC3B,MAAM+B,OAAO,GAAG,MAAMjB,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;QAC5CC,MAAM,EAAE,qBAAqB;QAC7BU,MAAM,EAAE,CAAC;UACPC,IAAI,EAAEjC,KAAK,CAACE,MAAM,CAACC,OAAO;UAC1B+B,IAAI,EAAEnC;QACR,CAAC;MACH,CAAC,CAAC;;MAEF;MACA;MACA,OAAO,IAAI,EAAE;QACX,MAAMoC,SAAS,GAAG,MAAMrB,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;UAC9CC,MAAM,EAAE,2BAA2B;UACnCU,MAAM,EAAE,CAACD,OAAO;QAClB,CAAC,CAAC;QAEF,IAAII,SAAS,KAAK,IAAI,EAAE;UACtBnC,KAAK,CAACM,eAAe,GAAG6B,SAAS,CAAC7B,eAAe;UACjDY,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEnB,KAAK,CAACM,eAAe,CAAC;UACpE;QACF;QACA,MAAM,IAAI8B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACzD;MACArC,KAAK,CAACO,UAAU,GAAG,IAAIP,KAAK,CAACC,UAAU,CAACO,GAAG,CAACC,QAAQ,CAACX,GAAG,EAAEE,KAAK,CAACM,eAAe,CAAC;IAClF,CAAC;IAED,MAAMiC,IAAIA,CAAC;MAACvC;IAAK,CAAC,EAAEwC,MAAM,EAAC;MACvB,IAAIC,MAAM,GAAGzC,KAAK,CAACO,UAAU,CAACmC,OAAO,CAACH,IAAI,CAACC,MAAM,CAAC,CAACG,SAAS,EAAE;MAE9D,MAAM7B,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;QAC5BC,MAAM,EAAE,qBAAqB;QAC7BU,MAAM,EAAE,CAAC;UACPC,IAAI,EAAEjC,KAAK,CAACE,MAAM,CAACC,OAAO;UAC1ByC,EAAE,EAAE5C,KAAK,CAACM,eAAe;UACzB4B,IAAI,EAAEO;QACR,CAAC;MACD,CAAC,CAAC,CAAClB,IAAI,CAACsB,IAAI,IAAI;QACd7C,KAAK,CAAC8C,MAAM,GAAGD,IAAI;MACnB,CAAC,CAAC;IACV,CAAC;IACD,MAAME,MAAMA,CAAC;MAAC/C;IAAK,CAAC,EAAEgD,GAAG,EAAC;MACxB,IAAIP,MAAM,GAAGzC,KAAK,CAACO,UAAU,CAACmC,OAAO,CAACK,MAAM,CAACC,GAAG,CAAC,CAACL,SAAS,EAAE;MAE7D,MAAM7B,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;QAC5BC,MAAM,EAAE,qBAAqB;QAC7BU,MAAM,EAAE,CAAC;UACPC,IAAI,EAAEjC,KAAK,CAACE,MAAM,CAACC,OAAO;UAC1ByC,EAAE,EAAE5C,KAAK,CAACM,eAAe;UACzB4B,IAAI,EAAEO;QACR,CAAC;MACD,CAAC,CAAC,CAAClB,IAAI,CAACsB,IAAI,IAAI;QACd7C,KAAK,CAAC8C,MAAM,GAAGD,IAAI;MACnB,CAAC,CAAC;IACV,CAAC;IACD,MAAMI,OAAOA,CAAC;MAACjD;IAAK,CAAC,EAAEkD,IAAI,EAAC;MAC1B,IAAIT,MAAM,GAAGzC,KAAK,CAACO,UAAU,CAACmC,OAAO,CAACO,OAAO,CAACC,IAAI,CAAC,CAACP,SAAS,EAAE;MAE/D,MAAM7B,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;QAC5BC,MAAM,EAAE,qBAAqB;QAC7BU,MAAM,EAAE,CAAC;UACPC,IAAI,EAAEjC,KAAK,CAACE,MAAM,CAACC,OAAO;UAC1ByC,EAAE,EAAE5C,KAAK,CAACM,eAAe;UACzB4B,IAAI,EAAEO;QACR,CAAC;MACD,CAAC,CAAC,CAAClB,IAAI,CAACsB,IAAI,IAAI;QACd7C,KAAK,CAAC8C,MAAM,GAAGD,IAAI;MACnB,CAAC,CAAC;IACV,CAAC;IAEC,MAAMM,IAAIA,CAAC;MAACnD;IAAK,CAAC,EAAC;MACjBkB,OAAO,CAACC,GAAG,CAACnB,KAAK,CAACM,eAAe,CAAC;MAClC,OAAO,MAAMN,KAAK,CAACO,UAAU,CAACmC,OAAO,CAACU,CAAC,EAAE,CAACC,IAAI,CAAC;QAACpB,IAAI,EAAEjC,KAAK,CAACE,MAAM,CAACC;MAAO,CAAC,CAAC,CAACoB,IAAI,CAACsB,IAAI,IAAI;QACxF7C,KAAK,CAAC8C,MAAM,GAAGD,IAAI;MACnB,CAAC,CAAC;IACN,CAAC;IACD,MAAMS,MAAMA,CAAC;MAACtD;IAAK,CAAC,EAAC;MACnB,OAAO,MAAMA,KAAK,CAACO,UAAU,CAACmC,OAAO,CAACM,GAAG,EAAE,CAACK,IAAI,CAAC;QAACpB,IAAI,EAAEjC,KAAK,CAACE,MAAM,CAACC;MAAO,CAAC,CAAC,CAACoB,IAAI,CAACsB,IAAI,IAAI;QAC1F7C,KAAK,CAAC8C,MAAM,GAAGD,IAAI;MACnB,CAAC,CAAC;IACN,CAAC;IACD,MAAMU,OAAOA,CAAC;MAACvD;IAAK,CAAC,EAAEwD,KAAK,EAAC;MAC3B,OAAO,MAAMxD,KAAK,CAACO,UAAU,CAACmC,OAAO,CAACR,IAAI,CAACsB,KAAK,CAAC,CAACH,IAAI,CAAC;QAACpB,IAAI,EAAEjC,KAAK,CAACE,MAAM,CAACC;MAAO,CAAC,CAAC,CAACoB,IAAI,CAACsB,IAAI,IAAI;QAChG7C,KAAK,CAAC8C,MAAM,GAAGD,IAAI;MACnB,CAAC,CAAC;IACN;EAEA,CAAC;EAEDY,OAAO,EAAC,CAER;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}