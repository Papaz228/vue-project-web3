{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;\n/**\n *  @_ignore\n */\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../transaction/index.js\");\nconst index_js_4 = require(\"../utils/index.js\");\nconst BN_0 = BigInt(0);\nfunction allowNull(format, nullValue) {\n  return function (value) {\n    if (value == null) {\n      return nullValue;\n    }\n    return format(value);\n  };\n}\nexports.allowNull = allowNull;\nfunction arrayOf(format) {\n  return array => {\n    if (!Array.isArray(array)) {\n      throw new Error(\"not an array\");\n    }\n    return array.map(i => format(i));\n  };\n}\nexports.arrayOf = arrayOf;\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nfunction object(format, altNames) {\n  return value => {\n    const result = {};\n    for (const key in format) {\n      let srcKey = key;\n      if (altNames && key in altNames && !(srcKey in value)) {\n        for (const altKey of altNames[key]) {\n          if (altKey in value) {\n            srcKey = altKey;\n            break;\n          }\n        }\n      }\n      try {\n        const nv = format[key](value[srcKey]);\n        if (nv !== undefined) {\n          result[key] = nv;\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : \"not-an-error\";\n        (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", {\n          value\n        });\n      }\n    }\n    return result;\n  };\n}\nexports.object = object;\nfunction formatBoolean(value) {\n  switch (value) {\n    case true:\n    case \"true\":\n      return true;\n    case false:\n    case \"false\":\n      return false;\n  }\n  (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n}\nexports.formatBoolean = formatBoolean;\nfunction formatData(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), \"invalid data\", \"value\", value);\n  return value;\n}\nexports.formatData = formatData;\nfunction formatHash(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), \"invalid hash\", \"value\", value);\n  return value;\n}\nexports.formatHash = formatHash;\nfunction formatUint256(value) {\n  if (!(0, index_js_4.isHexString)(value)) {\n    throw new Error(\"invalid uint256\");\n  }\n  return (0, index_js_4.zeroPadValue)(value, 32);\n}\nexports.formatUint256 = formatUint256;\nconst _formatLog = object({\n  address: index_js_1.getAddress,\n  blockHash: formatHash,\n  blockNumber: index_js_4.getNumber,\n  data: formatData,\n  index: index_js_4.getNumber,\n  removed: allowNull(formatBoolean, false),\n  topics: arrayOf(formatHash),\n  transactionHash: formatHash,\n  transactionIndex: index_js_4.getNumber\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatLog(value) {\n  return _formatLog(value);\n}\nexports.formatLog = formatLog;\nconst _formatBlock = object({\n  hash: allowNull(formatHash),\n  parentHash: formatHash,\n  number: index_js_4.getNumber,\n  timestamp: index_js_4.getNumber,\n  nonce: allowNull(formatData),\n  difficulty: index_js_4.getBigInt,\n  gasLimit: index_js_4.getBigInt,\n  gasUsed: index_js_4.getBigInt,\n  miner: allowNull(index_js_1.getAddress),\n  extraData: formatData,\n  baseFeePerGas: allowNull(index_js_4.getBigInt)\n});\nfunction formatBlock(value) {\n  const result = _formatBlock(value);\n  result.transactions = value.transactions.map(tx => {\n    if (typeof tx === \"string\") {\n      return tx;\n    }\n    return formatTransactionResponse(tx);\n  });\n  return result;\n}\nexports.formatBlock = formatBlock;\nconst _formatReceiptLog = object({\n  transactionIndex: index_js_4.getNumber,\n  blockNumber: index_js_4.getNumber,\n  transactionHash: formatHash,\n  address: index_js_1.getAddress,\n  topics: arrayOf(formatHash),\n  data: formatData,\n  index: index_js_4.getNumber,\n  blockHash: formatHash\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatReceiptLog(value) {\n  return _formatReceiptLog(value);\n}\nexports.formatReceiptLog = formatReceiptLog;\nconst _formatTransactionReceipt = object({\n  to: allowNull(index_js_1.getAddress, null),\n  from: allowNull(index_js_1.getAddress, null),\n  contractAddress: allowNull(index_js_1.getAddress, null),\n  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n  index: index_js_4.getNumber,\n  root: allowNull(index_js_4.hexlify),\n  gasUsed: index_js_4.getBigInt,\n  logsBloom: allowNull(formatData),\n  blockHash: formatHash,\n  hash: formatHash,\n  logs: arrayOf(formatReceiptLog),\n  blockNumber: index_js_4.getNumber,\n  //confirmations: allowNull(getNumber, null),\n  cumulativeGasUsed: index_js_4.getBigInt,\n  effectiveGasPrice: allowNull(index_js_4.getBigInt),\n  status: allowNull(index_js_4.getNumber),\n  type: allowNull(index_js_4.getNumber, 0)\n}, {\n  effectiveGasPrice: [\"gasPrice\"],\n  hash: [\"transactionHash\"],\n  index: [\"transactionIndex\"]\n});\nfunction formatTransactionReceipt(value) {\n  return _formatTransactionReceipt(value);\n}\nexports.formatTransactionReceipt = formatTransactionReceipt;\nfunction formatTransactionResponse(value) {\n  // Some clients (TestRPC) do strange things like return 0x0 for the\n  // 0 address; correct this to be a real address\n  if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {\n    value.to = \"0x0000000000000000000000000000000000000000\";\n  }\n  const result = object({\n    hash: formatHash,\n    type: value => {\n      if (value === \"0x\" || value == null) {\n        return 0;\n      }\n      return (0, index_js_4.getNumber)(value);\n    },\n    accessList: allowNull(index_js_3.accessListify, null),\n    blockHash: allowNull(formatHash, null),\n    blockNumber: allowNull(index_js_4.getNumber, null),\n    transactionIndex: allowNull(index_js_4.getNumber, null),\n    //confirmations: allowNull(getNumber, null),\n    from: index_js_1.getAddress,\n    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n    gasPrice: allowNull(index_js_4.getBigInt),\n    maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),\n    maxFeePerGas: allowNull(index_js_4.getBigInt),\n    gasLimit: index_js_4.getBigInt,\n    to: allowNull(index_js_1.getAddress, null),\n    value: index_js_4.getBigInt,\n    nonce: index_js_4.getNumber,\n    data: formatData,\n    creates: allowNull(index_js_1.getAddress, null),\n    chainId: allowNull(index_js_4.getBigInt, null)\n  }, {\n    data: [\"input\"],\n    gasLimit: [\"gas\"]\n  })(value);\n  // If to and creates are empty, populate the creates from the value\n  if (result.to == null && result.creates == null) {\n    result.creates = (0, index_js_1.getCreateAddress)(result);\n  }\n  // @TODO: Check fee data\n  // Add an access list to supported transaction types\n  if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n    result.accessList = [];\n  }\n  // Compute the signature\n  if (value.signature) {\n    result.signature = index_js_2.Signature.from(value.signature);\n  } else {\n    result.signature = index_js_2.Signature.from(value);\n  }\n  // Some backends omit ChainId on legacy transactions, but we can compute it\n  if (result.chainId == null) {\n    const chainId = result.signature.legacyChainId;\n    if (chainId != null) {\n      result.chainId = chainId;\n    }\n  }\n  // @TODO: check chainID\n  /*\n  if (value.chainId != null) {\n      let chainId = value.chainId;\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       result.chainId = chainId;\n   } else {\n      let chainId = value.networkId;\n       // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n          chainId = value.chainId;\n      }\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       if (typeof(chainId) !== \"number\" && result.v != null) {\n          chainId = (result.v - 35) / 2;\n          if (chainId < 0) { chainId = 0; }\n          chainId = parseInt(chainId);\n      }\n       if (typeof(chainId) !== \"number\") { chainId = 0; }\n       result.chainId = chainId;\n  }\n  */\n  // 0x0000... should actually be null\n  if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {\n    result.blockHash = null;\n  }\n  return result;\n}\nexports.formatTransactionResponse = formatTransactionResponse;","map":{"version":3,"sources":["../../src.ts/providers/format.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;\n/**\n *  @_ignore\n */\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../transaction/index.js\");\nconst index_js_4 = require(\"../utils/index.js\");\nconst BN_0 = BigInt(0);\nfunction allowNull(format, nullValue) {\n    return (function (value) {\n        if (value == null) {\n            return nullValue;\n        }\n        return format(value);\n    });\n}\nexports.allowNull = allowNull;\nfunction arrayOf(format) {\n    return ((array) => {\n        if (!Array.isArray(array)) {\n            throw new Error(\"not an array\");\n        }\n        return array.map((i) => format(i));\n    });\n}\nexports.arrayOf = arrayOf;\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nfunction object(format, altNames) {\n    return ((value) => {\n        const result = {};\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) {\n                    result[key] = nv;\n                }\n            }\n            catch (error) {\n                const message = (error instanceof Error) ? error.message : \"not-an-error\";\n                (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", { value });\n            }\n        }\n        return result;\n    });\n}\nexports.object = object;\nfunction formatBoolean(value) {\n    switch (value) {\n        case true:\n        case \"true\":\n            return true;\n        case false:\n        case \"false\":\n            return false;\n    }\n    (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n}\nexports.formatBoolean = formatBoolean;\nfunction formatData(value) {\n    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\nexports.formatData = formatData;\nfunction formatHash(value) {\n    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\nexports.formatHash = formatHash;\nfunction formatUint256(value) {\n    if (!(0, index_js_4.isHexString)(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return (0, index_js_4.zeroPadValue)(value, 32);\n}\nexports.formatUint256 = formatUint256;\nconst _formatLog = object({\n    address: index_js_1.getAddress,\n    blockHash: formatHash,\n    blockNumber: index_js_4.getNumber,\n    data: formatData,\n    index: index_js_4.getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: index_js_4.getNumber,\n}, {\n    index: [\"logIndex\"]\n});\nfunction formatLog(value) {\n    return _formatLog(value);\n}\nexports.formatLog = formatLog;\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    number: index_js_4.getNumber,\n    timestamp: index_js_4.getNumber,\n    nonce: allowNull(formatData),\n    difficulty: index_js_4.getBigInt,\n    gasLimit: index_js_4.getBigInt,\n    gasUsed: index_js_4.getBigInt,\n    miner: allowNull(index_js_1.getAddress),\n    extraData: formatData,\n    baseFeePerGas: allowNull(index_js_4.getBigInt)\n});\nfunction formatBlock(value) {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx) => {\n        if (typeof (tx) === \"string\") {\n            return tx;\n        }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\nexports.formatBlock = formatBlock;\nconst _formatReceiptLog = object({\n    transactionIndex: index_js_4.getNumber,\n    blockNumber: index_js_4.getNumber,\n    transactionHash: formatHash,\n    address: index_js_1.getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: index_js_4.getNumber,\n    blockHash: formatHash,\n}, {\n    index: [\"logIndex\"]\n});\nfunction formatReceiptLog(value) {\n    return _formatReceiptLog(value);\n}\nexports.formatReceiptLog = formatReceiptLog;\nconst _formatTransactionReceipt = object({\n    to: allowNull(index_js_1.getAddress, null),\n    from: allowNull(index_js_1.getAddress, null),\n    contractAddress: allowNull(index_js_1.getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: index_js_4.getNumber,\n    root: allowNull(index_js_4.hexlify),\n    gasUsed: index_js_4.getBigInt,\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: index_js_4.getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: index_js_4.getBigInt,\n    effectiveGasPrice: allowNull(index_js_4.getBigInt),\n    status: allowNull(index_js_4.getNumber),\n    type: allowNull(index_js_4.getNumber, 0)\n}, {\n    effectiveGasPrice: [\"gasPrice\"],\n    hash: [\"transactionHash\"],\n    index: [\"transactionIndex\"],\n});\nfunction formatTransactionReceipt(value) {\n    return _formatTransactionReceipt(value);\n}\nexports.formatTransactionReceipt = formatTransactionReceipt;\nfunction formatTransactionResponse(value) {\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    const result = object({\n        hash: formatHash,\n        type: (value) => {\n            if (value === \"0x\" || value == null) {\n                return 0;\n            }\n            return (0, index_js_4.getNumber)(value);\n        },\n        accessList: allowNull(index_js_3.accessListify, null),\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(index_js_4.getNumber, null),\n        transactionIndex: allowNull(index_js_4.getNumber, null),\n        //confirmations: allowNull(getNumber, null),\n        from: index_js_1.getAddress,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(index_js_4.getBigInt),\n        maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),\n        maxFeePerGas: allowNull(index_js_4.getBigInt),\n        gasLimit: index_js_4.getBigInt,\n        to: allowNull(index_js_1.getAddress, null),\n        value: index_js_4.getBigInt,\n        nonce: index_js_4.getNumber,\n        data: formatData,\n        creates: allowNull(index_js_1.getAddress, null),\n        chainId: allowNull(index_js_4.getBigInt, null)\n    }, {\n        data: [\"input\"],\n        gasLimit: [\"gas\"]\n    })(value);\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = (0, index_js_1.getCreateAddress)(result);\n    }\n    // @TODO: Check fee data\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [];\n    }\n    // Compute the signature\n    if (value.signature) {\n        result.signature = index_js_2.Signature.from(value.signature);\n    }\n    else {\n        result.signature = index_js_2.Signature.from(value);\n    }\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) {\n            result.chainId = chainId;\n        }\n    }\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n    // 0x0000... should actually be null\n    if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n    return result;\n}\nexports.formatTransactionResponse = formatTransactionResponse;\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}