{"ast":null,"code":"import { createStore } from \"vuex\";\nconst ethers = require('ethers');\nimport { USER_PROFILE_ABI } from \"@/contracts/UserProfile.abi.js\";\n//import {SKILL_CONFIRMATION_ABI} from \"@/contracts/SkillConfirmation.abi.js\"\n// import {TRUST_NETWORK_ABI} from \"@/contracts/TrustNetwork.abi.js\"\n\n//const skillConfirmationAddress = \"\"\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\";\n// const trustNetworkAddress = \"\"\n\nexport default createStore({\n  state: {\n    provider: {},\n    chainId: {},\n    signer: {},\n    UserProfileContract: {},\n    //SkillConfirmationContract: {},\n    //TrustNetworkContract: {},\n\n    userProfile: {},\n    userAddress: \"\",\n    skillRequests: [],\n    userProfiles: []\n  },\n  getters: {},\n  mutations: {},\n  actions: {\n    async connectWallet({\n      state\n    }) {\n      if (typeof window.ethereum !== 'undefined') {\n        console.log(\"Etherium client installed!\");\n        if (window.ethereum.isMetaMask === true) {\n          console.log(\"MetaMask connected!\");\n          if (window.ethereum.isConnected() !== true) {\n            console.log(\"MetaMask is not connected!\");\n            await window.ethereum.enable();\n          }\n          console.log(\"MetaMask connected\");\n        } else {\n          alert(\"Metamask is not installed!\");\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n    },\n    // Действия для взаимодействия с контрактами Ethereum\n    async createProfile({\n      state\n    }, profileData) {\n      try {\n        const tx = await state.UserProfileContract.createProfile(profileData.name, profileData.contactInfo, profileData.socialLinks);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error creating profile:\", error);\n        return false;\n      }\n    },\n    // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error requesting confirmation:\", error);\n    //     return false;\n    //   }\n    // },\n    // async confirmSkill({ state }, requestIndex) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error confirming skill:\", error);\n    //     return false;\n    //   }\n    // },\n    async rateSkill({\n      state\n    }, {\n      skillName,\n      rating,\n      comment,\n      targetUser\n    }) {\n      try {\n        const tx = await state.UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error rating skill:\", error);\n        return false;\n      }\n    },\n    async fetchUserProfile({\n      state\n    }, address) {\n      try {\n        const profile = await state.UserProfileContract.profiles(address);\n        state.userProfile = profile;\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n      }\n    },\n    // async fetchSkillRequests({ state }, address) {\n    //   try {\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(address);\n    //     state.skillRequests = requests;\n    //   } catch (error) {\n    //     console.error(\"Error fetching skill requests:\", error);\n    //   }\n    // },\n    async fetchAllUserSkills({\n      state\n    }, address) {\n      try {\n        const skills = await state.UserProfileContract.getUserSkills(address);\n        const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n        return uniqueSkills;\n      } catch (error) {\n        console.error(\"Error fetching skills:\", error);\n      }\n    },\n    async fetchAllUserProfiles({\n      state\n    }) {\n      try {\n        const users = await state.UserProfileContract.getAllUserProfiles();\n        state.userProfiles = users;\n      } catch (error) {\n        console.error(\"Error fetching user profiles:\", error);\n      }\n    },\n    async fetchAllUserRatings({\n      state\n    }, address) {\n      try {\n        const ratings = await state.UserProfileContract.getUserSkillRatings(address);\n        return ratings;\n      } catch (error) {\n        console.error(\"Error fetching ratings:\", error);\n      }\n    },\n    async getUserSkillRatingsAverage({\n      state\n    }, userProfileAddress) {\n      try {\n        const ratings = await state.UserProfileContract.getUserSkillRatings(userProfileAddress);\n        let totalRating = 0;\n        let ratingCount = 0;\n        for (const rating of ratings) {\n          totalRating += rating.rating;\n          ratingCount++;\n        }\n        const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n        return averageRating;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error);\n        return 0;\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","ethers","require","USER_PROFILE_ABI","userProfileAddress","state","provider","chainId","signer","UserProfileContract","userProfile","userAddress","skillRequests","userProfiles","getters","mutations","actions","connectWallet","window","ethereum","console","log","isMetaMask","isConnected","enable","alert","createProfile","profileData","tx","name","contactInfo","socialLinks","wait","error","rateSkill","skillName","rating","comment","targetUser","fetchUserProfile","address","profile","profiles","fetchAllUserSkills","skills","getUserSkills","uniqueSkills","filter","value","index","indexOf","fetchAllUserProfiles","users","getAllUserProfiles","fetchAllUserRatings","ratings","getUserSkillRatings","getUserSkillRatingsAverage","totalRating","ratingCount","averageRating","modules"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/store/index.js"],"sourcesContent":["import {createStore} from \"vuex\"\nconst ethers = require('ethers');\n\nimport {USER_PROFILE_ABI} from \"@/contracts/UserProfile.abi.js\"\n//import {SKILL_CONFIRMATION_ABI} from \"@/contracts/SkillConfirmation.abi.js\"\n// import {TRUST_NETWORK_ABI} from \"@/contracts/TrustNetwork.abi.js\"\n\n\n//const skillConfirmationAddress = \"\"\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\"\n// const trustNetworkAddress = \"\"\n\nexport default createStore({\n  state:{\n    provider:{},\n    chainId:{},\n    signer:{},\n\n    UserProfileContract: {},\n    //SkillConfirmationContract: {},\n    //TrustNetworkContract: {},\n\n    \n    userProfile: {},\n    userAddress:\"\",\n\n    skillRequests: [],\n    userProfiles: []\n  },\n\n  getters:{\n  },\n\n  mutations:{\n  },\n\n  actions:{\n    async connectWallet({state}) {\n      if (typeof window.ethereum !== 'undefined') {\n          console.log(\"Etherium client installed!\");\n          if (window.ethereum.isMetaMask === true) {\n              console.log(\"MetaMask connected!\");\n              if (window.ethereum.isConnected() !== true) {\n                  console.log(\"MetaMask is not connected!\");\n                  await window.ethereum.enable();\n              }\n              console.log(\"MetaMask connected\");\n          } else {\n              alert (\"Metamask is not installed!\")\n          }\n      } else {\n          alert (\"Ethereum client is not installed!\")\n      }\n    \n  },\n    // Действия для взаимодействия с контрактами Ethereum\n      async createProfile({ state }, profileData) {\n        try {\n          const tx = await state.UserProfileContract.createProfile(profileData.name, profileData.contactInfo, profileData.socialLinks);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error creating profile:\", error);\n          return false;\n        }\n      },\n      // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error requesting confirmation:\", error);\n      //     return false;\n      //   }\n      // },\n      // async confirmSkill({ state }, requestIndex) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error confirming skill:\", error);\n      //     return false;\n      //   }\n      // },\n      async rateSkill({ state }, { skillName, rating, comment, targetUser }) {\n        try {\n          const tx = await state.UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error rating skill:\", error);\n          return false;\n        }\n      },\n      async fetchUserProfile({ state }, address) {\n        try {\n          const profile = await state.UserProfileContract.profiles(address);\n          state.userProfile = profile;\n        } catch (error) {\n          console.error(\"Error fetching user profile:\", error);\n        }\n      },\n      // async fetchSkillRequests({ state }, address) {\n      //   try {\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(address);\n      //     state.skillRequests = requests;\n      //   } catch (error) {\n      //     console.error(\"Error fetching skill requests:\", error);\n      //   }\n      // },\n      async fetchAllUserSkills({state}, address) {\n        try{\n          const skills = await state.UserProfileContract.getUserSkills(address);\n          const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n          return uniqueSkills;\n        } catch (error) {\n              console.error(\"Error fetching skills:\", error);\n            }\n      },\n      async fetchAllUserProfiles({state}){\n        try{\n          const users = await state.UserProfileContract.getAllUserProfiles();\n          state.userProfiles = users;\n        } catch (error) {\n          console.error(\"Error fetching user profiles:\", error);\n        }\n      },\n      async fetchAllUserRatings({state}, address) {\n        try{\n          const ratings = await state.UserProfileContract.getUserSkillRatings(address);\n          return ratings;\n        } catch (error) {\n              console.error(\"Error fetching ratings:\", error);\n        }\n      },\n      async getUserSkillRatingsAverage({state}, userProfileAddress) {\n        try {\n          const ratings = await state.UserProfileContract.getUserSkillRatings(userProfileAddress);\n          let totalRating = 0;\n          let ratingCount = 0;\n      \n          for (const rating of ratings) {\n            totalRating += rating.rating;\n            ratingCount++;\n          }\n      \n          const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n      \n          return averageRating;\n        } catch (error) {\n          console.error(\"Error fetching user skill ratings:\", error);\n          return 0;\n        }\n      },\n      \n  },\n\n  modules:{\n\n  }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}