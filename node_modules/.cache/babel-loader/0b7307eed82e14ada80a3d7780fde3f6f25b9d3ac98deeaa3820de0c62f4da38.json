{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport { create } from 'pinata-client';\nimport { mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      diplomaFile: null,\n      targetUser: ''\n    };\n  },\n  methods: {\n    ...mapActions(['saveAndMintNft']),\n    onFileChange(event) {\n      this.diplomaFile = event.target.files[0];\n    },\n    async uploadDiploma() {\n      try {\n        // Connect to Pinata\n        const pinata = create(process.env.VUE_APP_PINATA_API_KEY, process.env.VUE_APP_PINATA_API_SECRET);\n\n        // Read the diploma file\n        const reader = new FileReader();\n        reader.onload = async () => {\n          const diplomaData = new Uint8Array(reader.result);\n\n          // Upload the diploma file to Pinata\n          const result = await pinata.pinFileToIPFS(diplomaData);\n          const ipfsHash = result.IpfsHash;\n          //save\n          this.saveAndMintNft([ipfsHash, this.targetUser]);\n          console.log('IPFS Hash:', ipfsHash);\n        };\n        reader.readAsArrayBuffer(this.diplomaFile);\n      } catch (error) {\n        console.error('Error uploading diploma:', error);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/pages/AddDiplomaToUserPage.vue"],"names":[],"mappings":";;;AAWE,SAAS,MAAK,QAAS,eAAe;AACtC,SAAS,UAAS,QAAS,MAAK;AAEhC,eAAe;EACb,IAAI,CAAA,EAAG;IACL,OAAO;MACL,WAAW,EAAE,IAAI;MACjB,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACD,OAAO,EAAE;IACT,GAAG,UAAU,CAAC,CAAC,gBAAgB,CAAC,CAAC;IAC/B,YAAY,CAAC,KAAK,EAAE;MAClB,IAAI,CAAC,WAAU,GAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC;IACD,MAAM,aAAa,CAAA,EAAG;MACpB,IAAI;QACF;QACA,MAAM,MAAK,GAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;;QAEhG;QACA,MAAM,MAAK,GAAI,IAAI,UAAU,EAAE;QAC/B,MAAM,CAAC,MAAK,GAAI,YAAY;UAC1B,MAAM,WAAU,GAAI,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;;UAEjD;UACA,MAAM,MAAK,GAAI,MAAM,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC;UACtD,MAAM,QAAO,GAAI,MAAM,CAAC,QAAQ;UAChC;UACA,IAAI,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;UAC/C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC;QACrC,CAAC;QACD,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC;MAC5C,CAAA,CAAE,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC;MAClD;IACF;EACF;AACF,CAAC","sourcesContent":["<template>\n    <div>\n      <label>Upload file</label>\n      <input type=\"file\" @change=\"onFileChange\" accept=\".pdf, .png, .jpg, .jpeg\" />\n      <label>Rating (1-5):</label>\n      <input v-model=\"targetUser\" type=\"text\" placeholder=\"Enter target user address\"/>\n      <button @click=\"uploadDiploma\" :disabled=\"!diplomaFile\">Upload Diploma</button>\n    </div>\n  </template>\n  \n  <script>\n  import { create } from 'pinata-client';\n  import { mapActions } from 'vuex'\n\n  export default {\n    data() {\n      return {\n        diplomaFile: null,\n        targetUser: ''\n      };\n    },\n    methods: {\n    ...mapActions(['saveAndMintNft']),\n      onFileChange(event) {\n        this.diplomaFile = event.target.files[0];\n      },\n      async uploadDiploma() {\n        try {\n          // Connect to Pinata\n          const pinata = create(process.env.VUE_APP_PINATA_API_KEY, process.env.VUE_APP_PINATA_API_SECRET);\n  \n          // Read the diploma file\n          const reader = new FileReader();\n          reader.onload = async () => {\n            const diplomaData = new Uint8Array(reader.result);\n  \n            // Upload the diploma file to Pinata\n            const result = await pinata.pinFileToIPFS(diplomaData);\n            const ipfsHash = result.IpfsHash;\n            //save\n            this.saveAndMintNft([ipfsHash, this.targetUser])\n            console.log('IPFS Hash:', ipfsHash);\n          };\n          reader.readAsArrayBuffer(this.diplomaFile);\n        } catch (error) {\n          console.error('Error uploading diploma:', error);\n        }\n      },\n    },\n  };\n  </script>\n  "],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}