{"ast":null,"code":"import { createStore } from \"vuex\";\nimport { ethers } from \"ethers\";\nimport { USER_PROFILE_ABI } from \"@/contracts/UserProfile.abi.js\";\nimport { NFT_ABI } from \"@/contracts/DiplomaNFT.abi.js\";\nconst userProfileAddress = \"0xddAce096b2C2F7E871Bf5FaB393D566D7C885C9d\";\nconst nftAddress = \"0xD94187394CCAC3CdF5f52Cf7515bD1957AA3Bb50\";\nlet UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI);\nlet NFTcontract = new ethers.Contract(nftAddress, NFT_ABI);\nlet provider;\nlet signer;\nexport default createStore({\n  state: {\n    chainId: {},\n    userProfile: {},\n    userAddress: \"\",\n    skillRequests: [],\n    userProfiles: []\n  },\n  getters: {},\n  mutations: {},\n  actions: {\n    async connectWallet({\n      state\n    }) {\n      if (typeof window.ethereum !== 'undefined') {\n        console.log(\"Etherium client installed!\");\n        if (window.ethereum.isMetaMask === true) {\n          console.log(\"MetaMask connected!\");\n          if (window.ethereum.isConnected() !== true) {\n            console.log(\"MetaMask is not connected!\");\n            await window.ethereum.enable();\n          }\n          console.log(\"MetaMask connected\");\n          provider = new ethers.providers.Web3Provider(window.ethereum);\n          signer = await provider.getSigner();\n          state.userAddress = await signer.getAddress();\n          state.chainId = await window.ethereum.request({\n            method: \"eth_chainId\"\n          });\n          console.log(\"chainId: \", state.chainId);\n          UserProfileContract = UserProfileContract.connect(signer);\n          NFTcontract = NFTcontract.connect(signer);\n          window.ethereum.on(\"accountsChanged\", async () => {\n            state.userAddress = await signer.getAddress();\n            console.log(`Accounts changed to ${state.address}`);\n          });\n          window.ethereum.on(\"chainChanged\", async () => {\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            state.chainId = await window.ethereum.request({\n              method: \"eth_chainId\"\n            });\n            signer = await provider.getSigner();\n            state.userAddress = await signer.getAddress();\n            UserProfileContract = UserProfileContract.connect(signer);\n            NFTcontract = NFTcontract.connect(signer);\n            console.log(\"chainId changed to \", state.chainId);\n          });\n        } else {\n          alert(\"Metamask is not installed!\");\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n    },\n    // Действия для взаимодействия с контрактами Ethereum\n    async createProfile({\n      state\n    }, args) {\n      try {\n        const [nameProfile, contactInfo, socialLinks] = args;\n        const tx = await UserProfileContract.createProfile(nameProfile, contactInfo, socialLinks);\n        await tx.wait();\n        state.userProfiles = [...state.userProfiles, {\n          name: nameProfile,\n          contactInformation: contactInfo,\n          socialLinks: socialLinks,\n          userProfileAddress: state.userAddress\n        }];\n        return true;\n      } catch (error) {\n        console.error(\"Error creating profile:\", error);\n        return false;\n      }\n    },\n    async rateSkill({\n      state\n    }, args) {\n      try {\n        const [skillName, rating, comment, targetUser] = args;\n        const tx = await UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error rating skill:\", error, state.userAddress);\n        return false;\n      }\n    },\n    async addSkill({\n      state\n    }, skillName) {\n      try {\n        const tx = await UserProfileContract.addSkill(skillName);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error add skill:\", error, state.userAddress);\n        return false;\n      }\n    },\n    async fetchUserProfile({\n      state\n    }, address) {\n      try {\n        const profile = await UserProfileContract.profiles(address);\n        state.userProfile = profile;\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n      }\n    },\n    async fetchAllUserSkills({\n      state\n    }, address) {\n      try {\n        const skills = await UserProfileContract.getUserSkills(address);\n        const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n        return uniqueSkills;\n      } catch (error) {\n        console.error(\"Error fetching skills:\", error, state.userAddress);\n      }\n    },\n    async fetchAllUserProfiles({\n      state\n    }) {\n      try {\n        const users = await UserProfileContract.getAllUserProfiles();\n        state.userProfiles = users;\n      } catch (error) {\n        console.error(\"Error fetching user profiles:\", error);\n      }\n    },\n    async fetchAllUserRatings({\n      state\n    }, address) {\n      try {\n        const ratings = await UserProfileContract.getUserSkillRatings(address);\n        return ratings;\n      } catch (error) {\n        console.error(\"Error fetching ratings:\", error, state.userAddress);\n      }\n    },\n    async getUserSkillRatingsAverage({\n      state\n    }, address) {\n      try {\n        const ratings = await UserProfileContract.getUserSkillRatings(address);\n        let totalRating = 0;\n        let ratingCount = 0;\n        for (const rating of ratings) {\n          totalRating += rating.rating;\n          ratingCount++;\n        }\n        const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n        return averageRating;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error, state.userAddress);\n        return 0;\n      }\n    },\n    async saveAndMintNft({\n      state\n    }, args) {\n      try {\n        const [ipfsHash, targetUser] = args;\n        let tokenId = await NFTcontract.mintDiplomaNFT(targetUser, ipfsHash);\n        await tokenId.wait();\n      } catch (error) {\n        console.error(\"Error saving and minting NFT\", error, state.userAddress);\n        return 0;\n      }\n    },\n    async getUserTokenLinks({\n      state\n    }, address) {\n      try {\n        let hashes = await NFTcontract.getAllTokenHashesForUser(address);\n        let baseUrl = await NFTcontract.baseURI();\n        const imageURLs = hashes.map(hash => baseUrl + hash);\n        return imageURLs;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error, state.userAddress);\n        return 0;\n      }\n    },\n    async sendTrustRequest({\n      state\n    }, address) {\n      try {\n        await UserProfileContract.sendTrustRequest(address);\n      } catch (error) {\n        console.error(\"Error sending trust request:\", error, state.userAddress);\n        return 0;\n      }\n    },\n    async getUserTrustRequests({\n      state\n    }, address) {\n      try {\n        await UserProfileContract.getTrustRequests();\n      } catch (error) {\n        console.error(\"Error sending trust request:\", error, state.userAddress);\n        return 0;\n      }\n    }\n    // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error requesting confirmation:\", error);\n    //     return false;\n    //   }\n    // },\n    // async confirmSkill({ state }, requestIndex) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error confirming skill:\", error);\n    //     return false;\n    //   }\n    // },\n  },\n\n  modules: {}\n});","map":{"version":3,"names":["createStore","ethers","USER_PROFILE_ABI","NFT_ABI","userProfileAddress","nftAddress","UserProfileContract","Contract","NFTcontract","provider","signer","state","chainId","userProfile","userAddress","skillRequests","userProfiles","getters","mutations","actions","connectWallet","window","ethereum","console","log","isMetaMask","isConnected","enable","providers","Web3Provider","getSigner","getAddress","request","method","connect","on","address","alert","createProfile","args","nameProfile","contactInfo","socialLinks","tx","wait","name","contactInformation","error","rateSkill","skillName","rating","comment","targetUser","addSkill","fetchUserProfile","profile","profiles","fetchAllUserSkills","skills","getUserSkills","uniqueSkills","filter","value","index","indexOf","fetchAllUserProfiles","users","getAllUserProfiles","fetchAllUserRatings","ratings","getUserSkillRatings","getUserSkillRatingsAverage","totalRating","ratingCount","averageRating","saveAndMintNft","ipfsHash","tokenId","mintDiplomaNFT","getUserTokenLinks","hashes","getAllTokenHashesForUser","baseUrl","baseURI","imageURLs","map","hash","sendTrustRequest","getUserTrustRequests","getTrustRequests","modules"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/store/index.js"],"sourcesContent":["import {createStore} from \"vuex\"\nimport { ethers } from \"ethers\";\n\nimport {USER_PROFILE_ABI} from \"@/contracts/UserProfile.abi.js\"\nimport {NFT_ABI} from \"@/contracts/DiplomaNFT.abi.js\"\n\n\nconst userProfileAddress = \"0xddAce096b2C2F7E871Bf5FaB393D566D7C885C9d\"\nconst nftAddress = \"0xD94187394CCAC3CdF5f52Cf7515bD1957AA3Bb50\"\nlet UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI)\nlet NFTcontract = new ethers.Contract(nftAddress, NFT_ABI)\nlet provider\nlet signer\n\nexport default createStore({\n  state:{\n    chainId:{},\n\n\n    \n    userProfile: {},\n    userAddress:\"\",\n\n    skillRequests: [],\n    userProfiles: []\n  },\n\n  getters:{\n  },\n\n  mutations:{\n  },\n\n  actions:{\n    async connectWallet({state}) {\n      if (typeof window.ethereum !== 'undefined') {\n          console.log(\"Etherium client installed!\");\n          if (window.ethereum.isMetaMask === true) {\n              console.log(\"MetaMask connected!\");\n              if (window.ethereum.isConnected() !== true) {\n                  console.log(\"MetaMask is not connected!\");\n                  await window.ethereum.enable();\n              }\n      console.log(\"MetaMask connected\");\n      provider = new ethers.providers.Web3Provider(window.ethereum);\n      signer = await provider.getSigner();\n      state.userAddress = await signer.getAddress()\n      \n      state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n\n      console.log(\"chainId: \", state.chainId);\n      UserProfileContract = UserProfileContract.connect(signer)\n      NFTcontract = NFTcontract.connect(signer)\n      window.ethereum.on(\"accountsChanged\", async () => {\n        state.userAddress = await signer.getAddress()\n        console.log(`Accounts changed to ${state.address}`);\n      })\n\n      window.ethereum.on(\"chainChanged\", async () => {\n          provider = new ethers.providers.Web3Provider(window.ethereum);\n          state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n          signer = await provider.getSigner();\n          state.userAddress = await signer.getAddress()\n          UserProfileContract = UserProfileContract.connect(signer)\n          NFTcontract = NFTcontract.connect(signer)\n          console.log(\"chainId changed to \", state.chainId);\n      })\n          } else {\n              alert (\"Metamask is not installed!\")\n          }\n      } else {\n          alert (\"Ethereum client is not installed!\")\n      }\n    \n  },\n    // Действия для взаимодействия с контрактами Ethereum\n      async createProfile({state}, args) {\n        try {\n          const [nameProfile, contactInfo, socialLinks] = args\n          const tx = await UserProfileContract.createProfile(nameProfile, contactInfo, socialLinks);\n          await tx.wait();\n          state.userProfiles = [...state.userProfiles, {name: nameProfile, contactInformation: contactInfo, socialLinks: socialLinks, userProfileAddress: state.userAddress}];\n          return true;\n        } catch (error) {\n          console.error(\"Error creating profile:\", error);\n          return false;\n\n        }\n      },\n      async rateSkill({state}, args) {\n        try {\n          const [skillName, rating, comment, targetUser] = args\n          const tx = await UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error rating skill:\", error, state.userAddress);\n          return false;\n        }\n      },\n      async addSkill({state}, skillName) {\n        try{\n          const tx = await UserProfileContract.addSkill(skillName);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error add skill:\", error, state.userAddress);\n          return false;\n        }\n      },\n      async fetchUserProfile({ state }, address) {\n        try {\n          const profile = await UserProfileContract.profiles(address);\n          state.userProfile = profile;\n        } catch (error) {\n          console.error(\"Error fetching user profile:\", error);\n        }\n      },\n      async fetchAllUserSkills({state}, address) {\n        try{\n          const skills = await UserProfileContract.getUserSkills(address);\n          const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n          return uniqueSkills;\n        } catch (error) {\n              console.error(\"Error fetching skills:\", error, state.userAddress);\n            }\n      },\n      async fetchAllUserProfiles({state}){\n        try{\n          const users = await UserProfileContract.getAllUserProfiles();\n          \n          state.userProfiles = users;\n        } catch (error) {\n          console.error(\"Error fetching user profiles:\", error);\n        }\n      },\n      async fetchAllUserRatings({state}, address) {\n        try{\n          const ratings = await UserProfileContract.getUserSkillRatings(address);\n          return ratings;\n        } catch (error) {\n              console.error(\"Error fetching ratings:\", error, state.userAddress);\n        }\n      },\n      async getUserSkillRatingsAverage({state}, address) {\n        try {\n          const ratings = await UserProfileContract.getUserSkillRatings(address);\n          let totalRating = 0;\n          let ratingCount = 0;\n      \n          for (const rating of ratings) {\n            totalRating += rating.rating;\n            ratingCount++;\n          }\n      \n          const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n      \n          return averageRating;\n        } catch (error) {\n          console.error(\"Error fetching user skill ratings:\", error, state.userAddress);\n          return 0;\n        }\n      },\n      async saveAndMintNft({state}, args) {\n        try{\n          const [ipfsHash, targetUser] = args\n          let tokenId = await NFTcontract.mintDiplomaNFT(targetUser, ipfsHash)\n          await tokenId.wait()\n        } catch(error) {\n          console.error(\"Error saving and minting NFT\", error, state.userAddress);\n          return 0;\n        }\n      },\n      async getUserTokenLinks({state}, address) {\n        try{\n          let hashes = await NFTcontract.getAllTokenHashesForUser(address)\n          let baseUrl = await NFTcontract.baseURI()\n          const imageURLs = hashes.map((hash) => baseUrl + hash);\n          return imageURLs\n        } catch(error) {\n          console.error(\"Error fetching user skill ratings:\", error, state.userAddress);\n          return 0;\n        }\n      },\n      async sendTrustRequest({state}, address) {\n        try{\n          await UserProfileContract.sendTrustRequest(address)\n        } catch(error) {\n          console.error(\"Error sending trust request:\", error, state.userAddress);\n          return 0;\n        }\n      },\n      async getUserTrustRequests({state}, address) {\n        try{\n          await UserProfileContract.getTrustRequests()\n        } catch(error) {\n          console.error(\"Error sending trust request:\", error, state.userAddress);\n          return 0;\n        }\n      }\n       // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error requesting confirmation:\", error);\n      //     return false;\n      //   }\n      // },\n      // async confirmSkill({ state }, requestIndex) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error confirming skill:\", error);\n      //     return false;\n      //   }\n      // },\n      \n  },\n\n  modules:{\n\n  }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}