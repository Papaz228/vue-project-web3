{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateFieldInitSpec = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldSet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _classPrivateFieldGet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _defineProperty = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = void 0;\nconst properties_js_1 = require(\"../utils/properties.js\");\nconst index_js_1 = require(\"../utils/index.js\");\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nclass NetworkPlugin {\n  /**\n   *  The name of the plugin.\n   *\n   *  It is recommended to use reverse-domain-notation, which permits\n   *  unique names with a known authority as well as hierarchal entries.\n   */\n\n  /**\n   *  Creates a new **NetworkPlugin**.\n   */\n  constructor(name) {\n    _defineProperty(this, \"name\", void 0);\n    (0, properties_js_1.defineProperties)(this, {\n      name\n    });\n  }\n  /**\n   *  Creates a copy of this plugin.\n   */\n  clone() {\n    return new NetworkPlugin(this.name);\n  }\n}\nexports.NetworkPlugin = NetworkPlugin;\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nclass GasCostPlugin extends NetworkPlugin {\n  /**\n   *  The block number to treat these values as valid from.\n   *\n   *  This allows a hardfork to have updated values included as well as\n   *  mulutiple hardforks to be supported.\n   */\n\n  /**\n   *  The transactions base fee.\n   */\n\n  /**\n   *  The fee for creating a new account.\n   */\n\n  /**\n   *  The fee per zero-byte in the data.\n   */\n\n  /**\n   *  The fee per non-zero-byte in the data.\n   */\n\n  /**\n   *  The fee per storage key in the [[link-eip-2930]] access list.\n   */\n\n  /**\n   *  The fee per address in the [[link-eip-2930]] access list.\n   */\n\n  /**\n   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n   *  latest block or another GasCostPlugin supercedes that block number,\n   *  with the associated %%costs%%.\n   */\n  constructor(effectiveBlock, costs) {\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n    _defineProperty(this, \"effectiveBlock\", void 0);\n    _defineProperty(this, \"txBase\", void 0);\n    _defineProperty(this, \"txCreate\", void 0);\n    _defineProperty(this, \"txDataZero\", void 0);\n    _defineProperty(this, \"txDataNonzero\", void 0);\n    _defineProperty(this, \"txAccessListStorageKey\", void 0);\n    _defineProperty(this, \"txAccessListAddress\", void 0);\n    const props = {\n      effectiveBlock\n    };\n    function set(name, nullish) {\n      let value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      (0, index_js_1.assertArgument)(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    (0, properties_js_1.defineProperties)(this, props);\n  }\n  clone() {\n    return new GasCostPlugin(this.effectiveBlock, this);\n  }\n}\nexports.GasCostPlugin = GasCostPlugin;\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nclass EnsPlugin extends NetworkPlugin {\n  /**\n   *  The ENS Registrty Contract address.\n   */\n\n  /**\n   *  The chain ID that the ENS contract lives on.\n   */\n\n  /**\n   *  Creates a new **EnsPlugin** connected to %%address%% on the\n   *  %%targetNetwork%%. The default ENS address and mainnet is used\n   *  if unspecified.\n   */\n  constructor(address, targetNetwork) {\n    super(\"org.ethers.plugins.network.Ens\");\n    _defineProperty(this, \"address\", void 0);\n    _defineProperty(this, \"targetNetwork\", void 0);\n    (0, properties_js_1.defineProperties)(this, {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n  }\n  clone() {\n    return new EnsPlugin(this.address, this.targetNetwork);\n  }\n}\nexports.EnsPlugin = EnsPlugin;\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nvar _feeDataFunc = /*#__PURE__*/new WeakMap();\nclass FeeDataNetworkPlugin extends NetworkPlugin {\n  /**\n   *  The fee data function provided to the constructor.\n   */\n  get feeDataFunc() {\n    return _classPrivateFieldGet(this, _feeDataFunc);\n  }\n  /**\n   *  Creates a new **FeeDataNetworkPlugin**.\n   */\n  constructor(feeDataFunc) {\n    super(\"org.ethers.plugins.network.FeeData\");\n    _classPrivateFieldInitSpec(this, _feeDataFunc, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _feeDataFunc, feeDataFunc);\n  }\n  /**\n   *  Resolves to the fee data.\n   */\n  async getFeeData(provider) {\n    return await _classPrivateFieldGet(this, _feeDataFunc).call(this, provider);\n  }\n  clone() {\n    return new FeeDataNetworkPlugin(_classPrivateFieldGet(this, _feeDataFunc));\n  }\n}\nexports.FeeDataNetworkPlugin = FeeDataNetworkPlugin;\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/","map":{"version":3,"sources":["../../src.ts/providers/plugins-network.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = void 0;\nconst properties_js_1 = require(\"../utils/properties.js\");\nconst index_js_1 = require(\"../utils/index.js\");\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nclass NetworkPlugin {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    name;\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */\n    constructor(name) {\n        (0, properties_js_1.defineProperties)(this, { name });\n    }\n    /**\n     *  Creates a copy of this plugin.\n     */\n    clone() {\n        return new NetworkPlugin(this.name);\n    }\n}\nexports.NetworkPlugin = NetworkPlugin;\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nclass GasCostPlugin extends NetworkPlugin {\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    effectiveBlock;\n    /**\n     *  The transactions base fee.\n     */\n    txBase;\n    /**\n     *  The fee for creating a new account.\n     */\n    txCreate;\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    txDataZero;\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    txDataNonzero;\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    txAccessListStorageKey;\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    txAccessListAddress;\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */\n    constructor(effectiveBlock, costs) {\n        if (effectiveBlock == null) {\n            effectiveBlock = 0;\n        }\n        super(`org.ethers.network.plugins.GasCost#${(effectiveBlock || 0)}`);\n        const props = { effectiveBlock };\n        function set(name, nullish) {\n            let value = (costs || {})[name];\n            if (value == null) {\n                value = nullish;\n            }\n            (0, index_js_1.assertArgument)(typeof (value) === \"number\", `invalud value for ${name}`, \"costs\", costs);\n            props[name] = value;\n        }\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n        (0, properties_js_1.defineProperties)(this, props);\n    }\n    clone() {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\nexports.GasCostPlugin = GasCostPlugin;\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nclass EnsPlugin extends NetworkPlugin {\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    address;\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    targetNetwork;\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */\n    constructor(address, targetNetwork) {\n        super(\"org.ethers.plugins.network.Ens\");\n        (0, properties_js_1.defineProperties)(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1 : targetNetwork)\n        });\n    }\n    clone() {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\nexports.EnsPlugin = EnsPlugin;\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nclass FeeDataNetworkPlugin extends NetworkPlugin {\n    #feeDataFunc;\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    get feeDataFunc() {\n        return this.#feeDataFunc;\n    }\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */\n    constructor(feeDataFunc) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n    /**\n     *  Resolves to the fee data.\n     */\n    async getFeeData(provider) {\n        return await this.#feeDataFunc(provider);\n    }\n    clone() {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\nexports.FeeDataNetworkPlugin = FeeDataNetworkPlugin;\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n//# sourceMappingURL=plugins-network.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}