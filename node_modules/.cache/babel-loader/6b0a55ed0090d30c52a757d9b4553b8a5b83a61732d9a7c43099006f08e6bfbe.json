{"ast":null,"code":"\"use strict\";\n\n/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nvar _classPrivateFieldInitSpec = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/alan/VisualStudioProjects/BU/vue-proj1/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nrequire(\"core-js/modules/esnext.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/esnext.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/esnext.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningKey = void 0;\nconst tslib_1 = require(\"tslib\");\nconst secp256k1 = tslib_1.__importStar(require(\"@noble/secp256k1\"));\nconst index_js_1 = require(\"../utils/index.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst signature_js_1 = require(\"./signature.js\");\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key, ...messages) {\n  return (0, index_js_1.getBytes)((0, hmac_js_1.computeHmac)(\"sha256\", key, (0, index_js_1.concat)(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nvar _privateKey = /*#__PURE__*/new WeakMap();\nclass SigningKey {\n  /**\n   *  Creates a new **SigningKey** for %%privateKey%%.\n   */\n  constructor(privateKey) {\n    _classPrivateFieldInitSpec(this, _privateKey, {\n      writable: true,\n      value: void 0\n    });\n    (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n    _classPrivateFieldSet(this, _privateKey, (0, index_js_1.hexlify)(privateKey));\n  }\n  /**\n   *  The private key.\n   */\n  get privateKey() {\n    return _classPrivateFieldGet(this, _privateKey);\n  }\n  /**\n   *  The uncompressed public key.\n   *\n   * This will always begin with the prefix ``0x04`` and be 132\n   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n   */\n  get publicKey() {\n    return SigningKey.computePublicKey(_classPrivateFieldGet(this, _privateKey));\n  }\n  /**\n   *  The compressed public key.\n   *\n   *  This will always begin with either the prefix ``0x02`` or ``0x03``\n   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n   *  nibbles)\n   */\n  get compressedPublicKey() {\n    return SigningKey.computePublicKey(_classPrivateFieldGet(this, _privateKey), true);\n  }\n  /**\n   *  Return the signature of the signed %%digest%%.\n   */\n  sign(digest) {\n    (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n    const [sigDer, recid] = secp256k1.signSync((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(_classPrivateFieldGet(this, _privateKey)), {\n      recovered: true,\n      canonical: true\n    });\n    const sig = secp256k1.Signature.fromHex(sigDer);\n    return signature_js_1.Signature.from({\n      r: (0, index_js_1.toBeHex)(\"0x\" + sig.r.toString(16), 32),\n      s: (0, index_js_1.toBeHex)(\"0x\" + sig.s.toString(16), 32),\n      v: recid ? 0x1c : 0x1b\n    });\n  }\n  /**\n   *  Returns the [[link-wiki-ecdh]] shared secret between this\n   *  private key and the %%other%% key.\n   *\n   *  The %%other%% key may be any type of key, a raw public key,\n   *  a compressed/uncompressed pubic key or aprivate key.\n   *\n   *  Best practice is usually to use a cryptographic hash on the\n   *  returned value before using it as a symetric secret.\n   *\n   *  @example:\n   *    sign1 = new SigningKey(id(\"some-secret-1\"))\n   *    sign2 = new SigningKey(id(\"some-secret-2\"))\n   *\n   *    // Notice that privA.computeSharedSecret(pubB)...\n   *    sign1.computeSharedSecret(sign2.publicKey)\n   *    //_result:\n   *\n   *    // ...is equal to privB.computeSharedSecret(pubA).\n   *    sign2.computeSharedSecret(sign1.publicKey)\n   *    //_result:\n   */\n  computeSharedSecret(other) {\n    const pubKey = SigningKey.computePublicKey(other);\n    return (0, index_js_1.hexlify)(secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(_classPrivateFieldGet(this, _privateKey)), (0, index_js_1.getBytes)(pubKey)));\n  }\n  /**\n   *  Compute the public key for %%key%%, optionally %%compressed%%.\n   *\n   *  The %%key%% may be any type of key, a raw public key, a\n   *  compressed/uncompressed public key or private key.\n   *\n   *  @example:\n   *    sign = new SigningKey(id(\"some-secret\"));\n   *\n   *    // Compute the uncompressed public key for a private key\n   *    SigningKey.computePublicKey(sign.privateKey)\n   *    //_result:\n   *\n   *    // Compute the compressed public key for a private key\n   *    SigningKey.computePublicKey(sign.privateKey, true)\n   *    //_result:\n   *\n   *    // Compute the uncompressed public key\n   *    SigningKey.computePublicKey(sign.publicKey, false);\n   *    //_result:\n   *\n   *    // Compute the Compressed a public key\n   *    SigningKey.computePublicKey(sign.publicKey, true);\n   *    //_result:\n   */\n  static computePublicKey(key, compressed) {\n    let bytes = (0, index_js_1.getBytes)(key, \"key\");\n    // private key\n    if (bytes.length === 32) {\n      const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n      return (0, index_js_1.hexlify)(pubKey);\n    }\n    // raw public key; use uncompressed key with 0x04 prefix\n    if (bytes.length === 64) {\n      const pub = new Uint8Array(65);\n      pub[0] = 0x04;\n      pub.set(bytes, 1);\n      bytes = pub;\n    }\n    const point = secp256k1.Point.fromHex(bytes);\n    return (0, index_js_1.hexlify)(point.toRawBytes(compressed));\n  }\n  /**\n   *  Returns the public key for the private key which produced the\n   *  %%signature%% for the given %%digest%%.\n   *\n   *  @example:\n   *    key = new SigningKey(id(\"some-secret\"))\n   *    digest = id(\"hello world\")\n   *    sig = key.sign(digest)\n   *\n   *    // Notice the signer public key...\n   *    key.publicKey\n   *    //_result:\n   *\n   *    // ...is equal to the recovered public key\n   *    SigningKey.recoverPublicKey(digest, sig)\n   *    //_result:\n   *\n   */\n  static recoverPublicKey(digest, signature) {\n    (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n    const sig = signature_js_1.Signature.from(signature);\n    const der = secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s]))).toDERRawBytes();\n    const pubKey = secp256k1.recoverPublicKey((0, index_js_1.getBytesCopy)(digest), der, sig.yParity);\n    (0, index_js_1.assertArgument)(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n    return (0, index_js_1.hexlify)(pubKey);\n  }\n  /**\n   *  Returns the point resulting from adding the ellipic curve points\n   *  %%p0%% and %%p1%%.\n   *\n   *  This is not a common function most developers should require, but\n   *  can be useful for certain privacy-specific techniques.\n   *\n   *  For example, it is used by [[HDNodeWallet]] to compute child\n   *  addresses from parent public keys and chain codes.\n   */\n  static addPoints(p0, p1, compressed) {\n    const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n    const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n    return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n  }\n}\nexports.SigningKey = SigningKey;","map":{"version":3,"sources":["../../src.ts/crypto/signing-key.ts"],"names":[],"mappings":";;AAAA;;;;AAIG;AAJH,IAAA,0BAAA,GAAA,OAAA,kHAAA,OAAA;AAAA,IAAA,qBAAA,GAAA,OAAA,6GAAA,OAAA;AAAA,IAAA,qBAAA,GAAA,OAAA,6GAAA,OAAA;AAAA,OAAA;AAAA,OAAA;AAAA,OAAA;;;;;;AAMA,MAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAKA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAOA;AAEA;AACA,SAAS,CAAC,KAAK,CAAC,cAAc,GAAG,UAAS,GAAe,EAAE,GAAG,QAA2B,EAAA;EACrF,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,CAAA,CAAA,EAAA,SAAA,CAAA,WAAW,EAAC,QAAQ,EAAE,GAAG,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,MAAM,EAAC,QAAQ,CAAC,CAAC,CAAC;AACjE,CAAC;AAED;;;AAGG;AAHH,IAAA,WAAA,oBAAA,OAAA;AAIA,MAAa,UAAU,CAAA;EAGnB;;AAEG;EACH,WAAA,CAAY,UAAqB,EAAA;IAAA,0BAAA,OAAA,WAAA;MAAA,QAAA;MAAA,KAAA;IAAA;IAC7B,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,CAAA,CAAA,EAAA,UAAA,CAAA,UAAU,EAAC,UAAU,CAAC,KAAK,EAAE,EAAE,qBAAqB,EAAE,YAAY,EAAE,YAAY,CAAC;IAChG,qBAAA,KAAI,EAAA,WAAA,EAAe,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,UAAU,CAAC;EAC1C;EAEA;;AAEG;EACH,IAAI,UAAU,CAAA,EAAA;IAAa,OAAA,qBAAA,CAAO,IAAI,EAAA,WAAA;EAAc;EAEpD;;;;;AAKG;EACH,IAAI,SAAS,CAAA,EAAA;IAAa,OAAO,UAAU,CAAC,gBAAgB,CAAA,qBAAA,CAAC,IAAI,EAAA,WAAA,EAAa;EAAE;EAEhF;;;;;;AAMG;EACH,IAAI,mBAAmB,CAAA,EAAA;IAAa,OAAO,UAAU,CAAC,gBAAgB,CAAA,qBAAA,CAAC,IAAI,EAAA,WAAA,GAAc,IAAI,CAAC;EAAE;EAEhG;;AAEG;EACH,IAAI,CAAC,MAAiB,EAAA;IAClB,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,CAAA,CAAA,EAAA,UAAA,CAAA,UAAU,EAAC,MAAM,CAAC,KAAK,EAAE,EAAE,uBAAuB,EAAE,QAAQ,EAAE,MAAM,CAAC;IAEpF,MAAM,CAAE,MAAM,EAAE,KAAK,CAAE,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAA,CAAA,EAAA,UAAA,CAAA,YAAY,EAAC,MAAM,CAAC,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,YAAY,EAAA,qBAAA,CAAC,IAAI,EAAA,WAAA,EAAa,EAAE;MAC/F,SAAS,EAAE,IAAI;MACf,SAAS,EAAE;KACd,CAAC;IAEF,MAAM,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC;IAC/C,OAAO,cAAA,CAAA,SAAS,CAAC,IAAI,CAAC;MAClB,CAAC,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MACzC,CAAC,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MACzC,CAAC,EAAG,KAAK,GAAG,IAAI,GAAE;KACrB,CAAC;EACN;EAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;EACH,mBAAmB,CAAC,KAAgB,EAAA;IAChC,MAAM,MAAM,GAAG,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC;IACjD,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,SAAS,CAAC,eAAe,CAAC,CAAA,CAAA,EAAA,UAAA,CAAA,YAAY,EAAA,qBAAA,CAAC,IAAI,EAAA,WAAA,EAAa,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,MAAM,CAAC,CAAC,CAAC;EAC/F;EAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;EACH,OAAO,gBAAgB,CAAC,GAAc,EAAE,UAAoB,EAAA;IACxD,IAAI,KAAK,GAAG,CAAA,CAAA,EAAA,UAAA,CAAA,QAAQ,EAAC,GAAG,EAAE,KAAK,CAAC;IAEhC;IACA,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE;MACrB,MAAM,MAAM,GAAG,SAAS,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC,UAAU,CAAC;MAC1D,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,MAAM,CAAC;IACzB;IAED;IACA,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE;MACrB,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC;MAC9B,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;MACb,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;MACjB,KAAK,GAAG,GAAG;IACd;IAED,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;IAC5C,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;EAChD;EAEA;;;;;;;;;;;;;;;;;AAiBG;EACH,OAAO,gBAAgB,CAAC,MAAiB,EAAE,SAAwB,EAAA;IAC/D,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,CAAA,CAAA,EAAA,UAAA,CAAA,UAAU,EAAC,MAAM,CAAC,KAAK,EAAE,EAAE,uBAAuB,EAAE,QAAQ,EAAE,MAAM,CAAC;IAEpF,MAAM,GAAG,GAAG,cAAA,CAAA,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;IACrC,MAAM,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA,CAAA,EAAA,UAAA,CAAA,YAAY,EAAC,CAAA,CAAA,EAAA,UAAA,CAAA,MAAM,EAAC,CAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE;IAEnG,MAAM,MAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC,CAAA,CAAA,EAAA,UAAA,CAAA,YAAY,EAAC,MAAM,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC;IACjF,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,MAAM,IAAI,IAAI,EAAE,8BAA8B,EAAE,WAAW,EAAE,SAAS,CAAC;IAEtF,OAAO,CAAA,CAAA,EAAA,UAAA,CAAA,OAAO,EAAC,MAAM,CAAC;EAC1B;EAEA;;;;;;;;;AASG;EACH,OAAO,SAAS,CAAC,EAAa,EAAE,EAAa,EAAE,UAAoB,EAAA;IAC/D,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAClF,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAClF,OAAO,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC;EACpD;AACH;AA1KD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SigningKey = void 0;\nconst tslib_1 = require(\"tslib\");\nconst secp256k1 = tslib_1.__importStar(require(\"@noble/secp256k1\"));\nconst index_js_1 = require(\"../utils/index.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst signature_js_1 = require(\"./signature.js\");\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key, ...messages) {\n    return (0, index_js_1.getBytes)((0, hmac_js_1.computeHmac)(\"sha256\", key, (0, index_js_1.concat)(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nclass SigningKey {\n    #privateKey;\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey) {\n        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = (0, index_js_1.hexlify)(privateKey);\n    }\n    /**\n     *  The private key.\n     */\n    get privateKey() { return this.#privateKey; }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest) {\n        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const [sigDer, recid] = secp256k1.signSync((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(this.#privateKey), {\n            recovered: true,\n            canonical: true\n        });\n        const sig = secp256k1.Signature.fromHex(sigDer);\n        return signature_js_1.Signature.from({\n            r: (0, index_js_1.toBeHex)(\"0x\" + sig.r.toString(16), 32),\n            s: (0, index_js_1.toBeHex)(\"0x\" + sig.s.toString(16), 32),\n            v: (recid ? 0x1c : 0x1b)\n        });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other) {\n        const pubKey = SigningKey.computePublicKey(other);\n        return (0, index_js_1.hexlify)(secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(this.#privateKey), (0, index_js_1.getBytes)(pubKey)));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key, compressed) {\n        let bytes = (0, index_js_1.getBytes)(key, \"key\");\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return (0, index_js_1.hexlify)(pubKey);\n        }\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n        const point = secp256k1.Point.fromHex(bytes);\n        return (0, index_js_1.hexlify)(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest, signature) {\n        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = signature_js_1.Signature.from(signature);\n        const der = secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s]))).toDERRawBytes();\n        const pubKey = secp256k1.recoverPublicKey((0, index_js_1.getBytesCopy)(digest), der, sig.yParity);\n        (0, index_js_1.assertArgument)(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n        return (0, index_js_1.hexlify)(pubKey);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0, p1, compressed) {\n        const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n}\nexports.SigningKey = SigningKey;\n//# sourceMappingURL=signing-key.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}