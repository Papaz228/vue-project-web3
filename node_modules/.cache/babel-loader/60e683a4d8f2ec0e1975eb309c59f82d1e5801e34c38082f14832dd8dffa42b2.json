{"ast":null,"code":"import { createStore } from \"vuex\";\nimport { ethers } from \"ethers\";\nimport { USER_PROFILE_ABI } from \"@/contracts/UserProfile.abi.js\";\n//import {SKILL_CONFIRMATION_ABI} from \"@/contracts/SkillConfirmation.abi.js\"\n// import {TRUST_NETWORK_ABI} from \"@/contracts/TrustNetwork.abi.js\"\n\n//const skillConfirmationAddress = \"\"\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\";\nlet UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI);\n// const trustNetworkAddress = \"\"\n\nexport default createStore({\n  state: {\n    provider: {},\n    chainId: {},\n    signer: {},\n    //UserProfileContract: {},\n    //SkillConfirmationContract: {},\n    //TrustNetworkContract: {},\n\n    userProfile: {},\n    userAddress: \"\",\n    skillRequests: [],\n    userProfiles: []\n  },\n  getters: {},\n  mutations: {},\n  actions: {\n    async connectWallet({\n      state\n    }) {\n      if (typeof window.ethereum !== 'undefined') {\n        console.log(\"Etherium client installed!\");\n        if (window.ethereum.isMetaMask === true) {\n          console.log(\"MetaMask connected!\");\n          if (window.ethereum.isConnected() !== true) {\n            console.log(\"MetaMask is not connected!\");\n            await window.ethereum.enable();\n          }\n          console.log(\"MetaMask connected\");\n          state.provider = new ethers.providers.Web3Provider(window.ethereum);\n          state.signer = await state.provider.getSigner();\n          state.userAddress = await state.signer.getAddress();\n          state.chainId = await window.ethereum.request({\n            method: \"eth_chainId\"\n          });\n          UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n          await UserProfileContract.getAllUserProfiles().then(console.log);\n          //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n          //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n\n          console.log(\"chainId: \", state.chainId);\n          window.ethereum.on(\"accountsChanged\", async () => {\n            state.userAddress = await state.signer.getAddress();\n            console.log(`Accounts changed to ${state.address}`);\n          });\n          window.ethereum.on(\"chainChanged\", async () => {\n            state.provider = new ethers.providers.Web3Provider(window.ethereum);\n            state.chainId = await window.ethereum.request({\n              method: \"eth_chainId\"\n            });\n            state.signer = await state.provider.getSigner();\n            state.userAddress = await state.signer.getAddress();\n            UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n            //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n            //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n            console.log(\"chainId changed to \", state.chainId);\n          });\n        } else {\n          alert(\"Metamask is not installed!\");\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n    },\n    // Действия для взаимодействия с контрактами Ethereum\n    async createProfile(name, contactInfo, socialLinks) {\n      try {\n        const tx = await UserProfileContract.createProfile(name, contactInfo, socialLinks);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error creating profile:\", error);\n        return false;\n      }\n    },\n    async rateSkill({\n      skillName,\n      rating,\n      comment,\n      targetUser\n    }) {\n      try {\n        const tx = await UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error rating skill:\", error);\n        return false;\n      }\n    },\n    async fetchUserProfile({\n      state\n    }, address) {\n      try {\n        const profile = await UserProfileContract.profiles(address);\n        state.userProfile = profile;\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n      }\n    },\n    async fetchAllUserSkills(address) {\n      try {\n        const skills = await UserProfileContract.getUserSkills(address);\n        const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n        return uniqueSkills;\n      } catch (error) {\n        console.error(\"Error fetching skills:\", error);\n      }\n    },\n    async fetchAllUserProfiles({\n      state\n    }) {\n      try {\n        const users = await UserProfileContract.getAllUserProfiles().then(console.log);\n        state.userProfiles = users;\n      } catch (error) {\n        console.error(\"Error fetching user profiles:\", error);\n      }\n    },\n    async fetchAllUserRatings(address) {\n      try {\n        const ratings = await UserProfileContract.getUserSkillRatings(address);\n        return ratings;\n      } catch (error) {\n        console.error(\"Error fetching ratings:\", error);\n      }\n    },\n    async getUserSkillRatingsAverage(userProfileAddress) {\n      try {\n        const ratings = await UserProfileContract.getUserSkillRatings(userProfileAddress);\n        let totalRating = 0;\n        let ratingCount = 0;\n        for (const rating of ratings) {\n          totalRating += rating.rating;\n          ratingCount++;\n        }\n        const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n        return averageRating;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error);\n        return 0;\n      }\n    }\n    // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error requesting confirmation:\", error);\n    //     return false;\n    //   }\n    // },\n    // async confirmSkill({ state }, requestIndex) {\n    //   try {\n    //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n    //     await tx.wait();\n    //     // Обновить skillRequests после успешной транзакции\n    //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n    //     state.skillRequests = requests;\n    //     return true;\n    //   } catch (error) {\n    //     console.error(\"Error confirming skill:\", error);\n    //     return false;\n    //   }\n    // },\n  },\n\n  modules: {}\n});","map":{"version":3,"names":["createStore","ethers","USER_PROFILE_ABI","userProfileAddress","UserProfileContract","Contract","state","provider","chainId","signer","userProfile","userAddress","skillRequests","userProfiles","getters","mutations","actions","connectWallet","window","ethereum","console","log","isMetaMask","isConnected","enable","providers","Web3Provider","getSigner","getAddress","request","method","getAllUserProfiles","then","on","address","alert","createProfile","name","contactInfo","socialLinks","tx","wait","error","rateSkill","skillName","rating","comment","targetUser","fetchUserProfile","profile","profiles","fetchAllUserSkills","skills","getUserSkills","uniqueSkills","filter","value","index","indexOf","fetchAllUserProfiles","users","fetchAllUserRatings","ratings","getUserSkillRatings","getUserSkillRatingsAverage","totalRating","ratingCount","averageRating","modules"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/store/index.js"],"sourcesContent":["import {createStore} from \"vuex\"\nimport { ethers } from \"ethers\";\n\nimport {USER_PROFILE_ABI} from \"@/contracts/UserProfile.abi.js\"\n//import {SKILL_CONFIRMATION_ABI} from \"@/contracts/SkillConfirmation.abi.js\"\n// import {TRUST_NETWORK_ABI} from \"@/contracts/TrustNetwork.abi.js\"\n\n\n//const skillConfirmationAddress = \"\"\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\"\nlet UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI)\n// const trustNetworkAddress = \"\"\n\nexport default createStore({\n  state:{\n    provider:{},\n    chainId:{},\n    signer:{},\n\n    //UserProfileContract: {},\n    //SkillConfirmationContract: {},\n    //TrustNetworkContract: {},\n\n    \n    userProfile: {},\n    userAddress:\"\",\n\n    skillRequests: [],\n    userProfiles: []\n  },\n\n  getters:{\n  },\n\n  mutations:{\n  },\n\n  actions:{\n    async connectWallet({state}) {\n      if (typeof window.ethereum !== 'undefined') {\n          console.log(\"Etherium client installed!\");\n          if (window.ethereum.isMetaMask === true) {\n              console.log(\"MetaMask connected!\");\n              if (window.ethereum.isConnected() !== true) {\n                  console.log(\"MetaMask is not connected!\");\n                  await window.ethereum.enable();\n              }\n      console.log(\"MetaMask connected\");\n      state.provider = new ethers.providers.Web3Provider(window.ethereum);\n      state.signer = await state.provider.getSigner();\n      state.userAddress = await state.signer.getAddress()\n\n      state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n\n      UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n      await UserProfileContract.getAllUserProfiles().then(console.log)\n     //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n      //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n\n      console.log(\"chainId: \", state.chainId);\n\n      window.ethereum.on(\"accountsChanged\", async () => {\n        state.userAddress = await state.signer.getAddress()\n        console.log(`Accounts changed to ${state.address}`);\n      })\n\n      window.ethereum.on(\"chainChanged\", async () => {\n          state.provider = new ethers.providers.Web3Provider(window.ethereum);\n          state.chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n          state.signer = await state.provider.getSigner();\n          state.userAddress = await state.signer.getAddress()\n          UserProfileContract = new ethers.Contract(userProfileAddress, USER_PROFILE_ABI, state.signer);\n          //state.SkillConfirmationContract = new ethers.Contract(skillConfirmationAddress, SKILL_CONFIRMATION_ABI, state.signer);\n          //state.TrusNetworkContract = new ethers.Contract(trustNetworkAddress, TRUST_NETWORK_ABI, state.signer);\n          console.log(\"chainId changed to \", state.chainId);\n      })\n          } else {\n              alert (\"Metamask is not installed!\")\n          }\n      } else {\n          alert (\"Ethereum client is not installed!\")\n      }\n    \n  },\n    // Действия для взаимодействия с контрактами Ethereum\n      async createProfile( name, contactInfo, socialLinks) {\n        try {\n          const tx = await UserProfileContract.createProfile(name, contactInfo, socialLinks);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error creating profile:\", error);\n          return false;\n        }\n      },\n      async rateSkill({ skillName, rating, comment, targetUser }) {\n        try {\n          const tx = await UserProfileContract.rateSkill(skillName, rating, comment, targetUser);\n          await tx.wait();\n          return true;\n        } catch (error) {\n          console.error(\"Error rating skill:\", error);\n          return false;\n        }\n      },\n      async fetchUserProfile({ state }, address) {\n        try {\n          const profile = await UserProfileContract.profiles(address);\n          state.userProfile = profile;\n        } catch (error) {\n          console.error(\"Error fetching user profile:\", error);\n        }\n      },\n      async fetchAllUserSkills( address) {\n        try{\n          const skills = await UserProfileContract.getUserSkills(address);\n          const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n          return uniqueSkills;\n        } catch (error) {\n              console.error(\"Error fetching skills:\", error);\n            }\n      },\n      async fetchAllUserProfiles({state}){\n        try{\n          const users = await UserProfileContract.getAllUserProfiles().then(console.log);\n          \n          state.userProfiles = users;\n        } catch (error) {\n          console.error(\"Error fetching user profiles:\", error);\n        }\n      },\n      async fetchAllUserRatings( address) {\n        try{\n          const ratings = await UserProfileContract.getUserSkillRatings(address);\n          return ratings;\n        } catch (error) {\n              console.error(\"Error fetching ratings:\", error);\n        }\n      },\n      async getUserSkillRatingsAverage(userProfileAddress) {\n        try {\n          const ratings = await UserProfileContract.getUserSkillRatings(userProfileAddress);\n          let totalRating = 0;\n          let ratingCount = 0;\n      \n          for (const rating of ratings) {\n            totalRating += rating.rating;\n            ratingCount++;\n          }\n      \n          const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n      \n          return averageRating;\n        } catch (error) {\n          console.error(\"Error fetching user skill ratings:\", error);\n          return 0;\n        }\n      },\n       // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error requesting confirmation:\", error);\n      //     return false;\n      //   }\n      // },\n      // async confirmSkill({ state }, requestIndex) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error confirming skill:\", error);\n      //     return false;\n      //   }\n      // },\n      \n  },\n\n  modules:{\n\n  }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}