{"ast":null,"code":"import { createStore } from \"vuex\";\nconst Web3 = require('web3');\nimport { USER_PROFILE_ABI } from \"@/contracts/UserProfile.abi.js\";\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\";\nlet UserProfileContract;\nexport default createStore({\n  state: {\n    web3: {},\n    userProfile: {},\n    userAddress: \"\",\n    skillRequests: [],\n    userProfiles: []\n  },\n  getters: {},\n  mutations: {},\n  actions: {\n    async connectWallet({\n      state\n    }) {\n      if (typeof window.ethereum !== 'undefined') {\n        console.log(\"Ethereum client installed!\");\n        if (window.ethereum.isMetaMask === true) {\n          console.log(\"MetaMask connected!\");\n          if (window.ethereum.isConnected() !== true) {\n            console.log(\"MetaMask is not connected!\");\n            await window.ethereum.enable();\n          }\n          console.log(\"MetaMask connected\");\n          state.web3 = new Web3(window.ethereum);\n          state.userAddress = (await state.web3.eth.getAccounts())[0];\n          const chainId = await state.web3.eth.getChainId();\n          UserProfileContract = new state.web3.eth.Contract(USER_PROFILE_ABI, userProfileAddress);\n          console.log(\"chainId: \", chainId);\n          window.ethereum.on(\"accountsChanged\", async () => {\n            state.userAddress = (await state.web3.eth.getAccounts())[0];\n            console.log(`Accounts changed to ${state.address}`);\n          });\n          window.ethereum.on(\"chainChanged\", async () => {\n            const newChainId = await state.web3.eth.getChainId();\n            state.chainId = newChainId;\n            UserProfileContract = new state.web3.eth.Contract(USER_PROFILE_ABI, userProfileAddress);\n            console.log(\"chainId changed to \", state.chainId);\n          });\n        } else {\n          alert(\"Metamask is not installed!\");\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n    },\n    // Actions to interact with Ethereum contracts\n    async createProfile({\n      state\n    }, {\n      name,\n      contactInfo,\n      socialLinks\n    }) {\n      try {\n        if (!state.web3) {\n          throw new Error(\"Web3 provider is not initialized\");\n        }\n        const accounts = await state.web3.eth.getAccounts();\n        if (accounts.length === 0) {\n          throw new Error(\"No accounts found\");\n        }\n        const tx = await UserProfileContract.methods.createProfile(name, contactInfo, socialLinks).send({\n          from: accounts[0]\n        });\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error creating profile:\", error);\n        return false;\n      }\n    },\n    async rateSkill({\n      state\n    }, {\n      skillName,\n      rating,\n      comment,\n      targetUser\n    }) {\n      try {\n        const accounts = await state.web3.eth.getAccounts();\n        const tx = await UserProfileContract.methods.rateSkill(skillName, rating, comment, targetUser).send({\n          from: accounts[0]\n        });\n        await tx.wait();\n        return true;\n      } catch (error) {\n        console.error(\"Error rating skill:\", error);\n        return false;\n      }\n    },\n    async fetchUserProfile({\n      state\n    }, address) {\n      try {\n        const profile = await UserProfileContract.methods.profiles(address).call();\n        state.userProfile = profile;\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n      }\n    },\n    async fetchAllUserSkills(address) {\n      try {\n        const skills = await UserProfileContract.methods.getUserSkills(address).call();\n        const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n        return uniqueSkills;\n      } catch (error) {\n        console.error(\"Error fetching skills:\", error);\n      }\n    },\n    async fetchAllUserProfiles({\n      state\n    }) {\n      try {\n        const users = await UserProfileContract.methods.getAllUserProfiles().call();\n        state.userProfiles = users;\n      } catch (error) {\n        console.error(\"Error fetching user profiles:\", error);\n      }\n    },\n    async fetchAllUserRatings(address) {\n      try {\n        const ratings = await UserProfileContract.methods.getUserSkillRatings(address).call();\n        return ratings;\n      } catch (error) {\n        console.error(\"Error fetching ratings:\", error);\n      }\n    },\n    async getUserSkillRatingsAverage(userProfileAddress) {\n      try {\n        const ratings = await UserProfileContract.methods.getUserSkillRatings(userProfileAddress).call();\n        let totalRating = 0;\n        let ratingCount = 0;\n        for (const rating of ratings) {\n          totalRating += parseInt(rating.rating);\n          ratingCount++;\n        }\n        const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n        return averageRating;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error);\n        return 0;\n      }\n    }\n  },\n  modules: {}\n});\n\n// async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n//   try {\n//     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n//     await tx.wait();\n//     // Обновить skillRequests после успешной транзакции\n//     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n//     state.skillRequests = requests;\n//     return true;\n//   } catch (error) {\n//     console.error(\"Error requesting confirmation:\", error);\n//     return false;\n//   }\n// },\n// async confirmSkill({ state }, requestIndex) {\n//   try {\n//     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n//     await tx.wait();\n//     // Обновить skillRequests после успешной транзакции\n//     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n//     state.skillRequests = requests;\n//     return true;\n//   } catch (error) {\n//     console.error(\"Error confirming skill:\", error);\n//     return false;\n//   }\n// },\n// async fetchSkillRequests({ state }, address) {\n//   try {\n//     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(address);\n//     state.skillRequests = requests;\n//   } catch (error) {\n//     console.error(\"Error fetching skill requests:\", error);\n//   }\n// },","map":{"version":3,"names":["createStore","Web3","require","USER_PROFILE_ABI","userProfileAddress","UserProfileContract","state","web3","userProfile","userAddress","skillRequests","userProfiles","getters","mutations","actions","connectWallet","window","ethereum","console","log","isMetaMask","isConnected","enable","eth","getAccounts","chainId","getChainId","Contract","on","address","newChainId","alert","createProfile","name","contactInfo","socialLinks","Error","accounts","length","tx","methods","send","from","wait","error","rateSkill","skillName","rating","comment","targetUser","fetchUserProfile","profile","profiles","call","fetchAllUserSkills","skills","getUserSkills","uniqueSkills","filter","value","index","indexOf","fetchAllUserProfiles","users","getAllUserProfiles","fetchAllUserRatings","ratings","getUserSkillRatings","getUserSkillRatingsAverage","totalRating","ratingCount","parseInt","averageRating","modules"],"sources":["/home/alan/VisualStudioProjects/BU/vue-proj1/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\nconst Web3 = require('web3');\n\nimport { USER_PROFILE_ABI } from \"@/contracts/UserProfile.abi.js\";\n\nconst userProfileAddress = \"0xcE8DB739F55655e09dC19fE8aB9E41e037417520\";\nlet UserProfileContract;\n\nexport default createStore({\n  state: {\n    web3: {},\n    userProfile: {},\n    userAddress: \"\",\n    skillRequests: [],\n    userProfiles: []\n  },\n\n  getters: {},\n\n  mutations: {},\n\n  actions: {\n    async connectWallet({ state }) {\n      if (typeof window.ethereum !== 'undefined') {\n        console.log(\"Ethereum client installed!\");\n        if (window.ethereum.isMetaMask === true) {\n          console.log(\"MetaMask connected!\");\n          if (window.ethereum.isConnected() !== true) {\n            console.log(\"MetaMask is not connected!\");\n            await window.ethereum.enable();\n          }\n          console.log(\"MetaMask connected\");\n          state.web3 = new Web3(window.ethereum);\n          state.userAddress = (await state.web3.eth.getAccounts())[0];\n\n          const chainId = await state.web3.eth.getChainId();\n          UserProfileContract = new state.web3.eth.Contract(USER_PROFILE_ABI, userProfileAddress);\n\n          console.log(\"chainId: \", chainId);\n\n          window.ethereum.on(\"accountsChanged\", async () => {\n            state.userAddress = (await state.web3.eth.getAccounts())[0];\n            console.log(`Accounts changed to ${state.address}`);\n          });\n\n          window.ethereum.on(\"chainChanged\", async () => {\n            const newChainId = await state.web3.eth.getChainId();\n            state.chainId = newChainId;\n            UserProfileContract = new state.web3.eth.Contract(USER_PROFILE_ABI, userProfileAddress);\n\n            console.log(\"chainId changed to \", state.chainId);\n          });\n        } else {\n          alert(\"Metamask is not installed!\");\n        }\n      } else {\n        alert(\"Ethereum client is not installed!\");\n      }\n    },\n\n    // Actions to interact with Ethereum contracts\n    async createProfile({ state }, { name, contactInfo, socialLinks }) {\n      try {\n        if (!state.web3) {\n          throw new Error(\"Web3 provider is not initialized\");\n        }\n        const accounts = await state.web3.eth.getAccounts();\n        if (accounts.length === 0) {\n          throw new Error(\"No accounts found\");\n        }\n        const tx = await UserProfileContract.methods.createProfile(name, contactInfo, socialLinks).send({ from: accounts[0] });\n        await tx.wait()\n        return true;\n      } catch (error) {\n        console.error(\"Error creating profile:\", error);\n        return false;\n      }\n    },\n\n    async rateSkill({ state }, { skillName, rating, comment, targetUser }) {\n      try {\n        const accounts = await state.web3.eth.getAccounts();\n        const tx = await UserProfileContract.methods.rateSkill(skillName, rating, comment, targetUser).send({ from: accounts[0] });\n        await tx.wait()\n\n        return true;\n      } catch (error) {\n        console.error(\"Error rating skill:\", error);\n        return false;\n      }\n    },\n\n    async fetchUserProfile({ state }, address) {\n      try {\n        const profile = await UserProfileContract.methods.profiles(address).call();\n        state.userProfile = profile;\n      } catch (error) {\n        console.error(\"Error fetching user profile:\", error);\n      }\n    },\n\n    async fetchAllUserSkills(address) {\n      try {\n        const skills = await UserProfileContract.methods.getUserSkills(address).call();\n        const uniqueSkills = skills.filter((value, index) => skills.indexOf(value) === index);\n        return uniqueSkills;\n      } catch (error) {\n        console.error(\"Error fetching skills:\", error);\n      }\n    },\n\n    async fetchAllUserProfiles({ state }) {\n      try {\n        const users = await UserProfileContract.methods.getAllUserProfiles().call();\n        state.userProfiles = users;\n      } catch (error) {\n        console.error(\"Error fetching user profiles:\", error);\n      }\n    },\n\n    async fetchAllUserRatings( address) {\n      try {\n        const ratings = await UserProfileContract.methods.getUserSkillRatings(address).call();\n        return ratings;\n      } catch (error) {\n        console.error(\"Error fetching ratings:\", error);\n      }\n    },\n\n    async getUserSkillRatingsAverage( userProfileAddress) {\n      try {\n        const ratings = await UserProfileContract.methods.getUserSkillRatings(userProfileAddress).call();\n        let totalRating = 0;\n        let ratingCount = 0;\n\n        for (const rating of ratings) {\n          totalRating += parseInt(rating.rating);\n          ratingCount++;\n        }\n\n        const averageRating = ratingCount > 0 ? totalRating / ratingCount : 0;\n\n        return averageRating;\n      } catch (error) {\n        console.error(\"Error fetching user skill ratings:\", error);\n        return 0;\n      }\n    },\n  },\n\n  modules: {},\n});\n\n // async requestConfirmation({ state }, { confirmatorAddress, skillName }) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.requestConfirmation(confirmatorAddress, skillName);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(confirmatorAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error requesting confirmation:\", error);\n      //     return false;\n      //   }\n      // },\n      // async confirmSkill({ state }, requestIndex) {\n      //   try {\n      //     const tx = await state.SkillConfirmationContract.confirmSkill(requestIndex);\n      //     await tx.wait();\n      //     // Обновить skillRequests после успешной транзакции\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(state.userAddress);\n      //     state.skillRequests = requests;\n      //     return true;\n      //   } catch (error) {\n      //     console.error(\"Error confirming skill:\", error);\n      //     return false;\n      //   }\n      // },\n        // async fetchSkillRequests({ state }, address) {\n      //   try {\n      //     const requests = await state.SkillConfirmationContract.getSkillRequestsByAddress(address);\n      //     state.skillRequests = requests;\n      //   } catch (error) {\n      //     console.error(\"Error fetching skill requests:\", error);\n      //   }\n      // },"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}