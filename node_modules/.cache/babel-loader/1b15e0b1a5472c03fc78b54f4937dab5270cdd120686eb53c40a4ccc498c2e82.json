{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accessListify = void 0;\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: (0, index_js_1.getAddress)(addr),\n    storageKeys: storageKeys.map((storageKey, index) => {\n      (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n      return storageKey.toLowerCase();\n    })\n  };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nfunction accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map((set, index) => {\n      if (Array.isArray(set)) {\n        (0, index_js_2.assertArgument)(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n        return accessSetify(set[0], set[1]);\n      }\n      (0, index_js_2.assertArgument)(set != null && typeof set === \"object\", \"invalid address-slot set\", \"value\", value);\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n  (0, index_js_2.assertArgument)(value != null && typeof value === \"object\", \"invalid access list\", \"value\", value);\n  const result = Object.keys(value).map(addr => {\n    const storageKeys = value[addr].reduce((accum, storageKey) => {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort((a, b) => a.address.localeCompare(b.address));\n  return result;\n}\nexports.accessListify = accessListify;","map":{"version":3,"sources":["../../src.ts/transaction/accesslist.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAKA,SAAS,YAAY,CAAC,IAAY,EAAE,WAA0B,EAAA;EAC1D,OAAO;IACH,OAAO,EAAE,CAAA,CAAA,EAAA,UAAA,CAAA,UAAU,EAAC,IAAI,CAAC;IACzB,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,KAAK,KAAI;MAC/C,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,CAAA,CAAA,EAAA,UAAA,CAAA,WAAW,EAAC,UAAU,EAAE,EAAE,CAAC,EAAE,cAAc,EAAE,eAAgB,KAAM,GAAG,EAAE,UAAU,CAAC;MAClG,OAAO,UAAU,CAAC,WAAW,EAAE;IACnC,CAAC;GACJ;AACL;AAEA;;AAEG;AACH,SAAgB,aAAa,CAAC,KAAoB,EAAA;EAC9C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACtB,OAA0F,KAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,KAAI;MAChH,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACpB,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE,kBAAkB,EAAE,SAAU,KAAM,GAAG,EAAE,GAAG,CAAC;QAC9E,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;MACtC;MACD,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,GAAG,IAAI,IAAI,IAAI,OAAO,GAAI,KAAK,QAAQ,EAAE,0BAA0B,EAAE,OAAO,EAAE,KAAK,CAAC;MACnG,OAAO,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,WAAW,CAAC;IACrD,CAAC,CAAC;EACL;EAED,CAAA,CAAA,EAAA,UAAA,CAAA,cAAc,EAAC,KAAK,IAAI,IAAI,IAAI,OAAO,KAAM,KAAK,QAAQ,EAAE,qBAAqB,EAAE,OAAO,EAAE,KAAK,CAAC;EAElG,MAAM,MAAM,GAA2D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAE,IAAI,IAAI;IACnG,MAAM,WAAW,GAAyB,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,UAAU,KAAI;MAC/E,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI;MACxB,OAAO,KAAK;IAChB,CAAC,EAAwB,CAAA,CAAG,CAAC;IAC7B,OAAO,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;EAC9D,CAAC,CAAC;EACF,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAM,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAE,CAAC;EAC3D,OAAO,MAAM;AACjB;AAvBA,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.accessListify = void 0;\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: (0, index_js_1.getAddress)(addr),\n        storageKeys: storageKeys.map((storageKey, index) => {\n            (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nfunction accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                (0, index_js_2.assertArgument)(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n                return accessSetify(set[0], set[1]);\n            }\n            (0, index_js_2.assertArgument)(set != null && typeof (set) === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    (0, index_js_2.assertArgument)(value != null && typeof (value) === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\nexports.accessListify = accessListify;\n//# sourceMappingURL=accesslist.js.map"]},"metadata":{},"sourceType":"script","externalDependencies":[]}